
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004934  08004934  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004934  08004934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  080049ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080049ac  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3f  00000000  00000000  0002c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000120fb  00000000  00000000  0002fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d941  00000000  00000000  00041b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a33c  00000000  00000000  0004f444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  000b97d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004838 	.word	0x08004838

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004838 	.word	0x08004838

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 f89f 	bl	8000554 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f82b 	bl	800047c <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f891 	bl	8000554 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f887 	bl	8000554 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f837 	bl	80004c8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f82d 	bl	80004c8 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__eqsf2>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	0042      	lsls	r2, r0, #1
 8000480:	0245      	lsls	r5, r0, #9
 8000482:	024e      	lsls	r6, r1, #9
 8000484:	004c      	lsls	r4, r1, #1
 8000486:	0fc3      	lsrs	r3, r0, #31
 8000488:	0a6d      	lsrs	r5, r5, #9
 800048a:	2001      	movs	r0, #1
 800048c:	0e12      	lsrs	r2, r2, #24
 800048e:	0a76      	lsrs	r6, r6, #9
 8000490:	0e24      	lsrs	r4, r4, #24
 8000492:	0fc9      	lsrs	r1, r1, #31
 8000494:	2aff      	cmp	r2, #255	; 0xff
 8000496:	d006      	beq.n	80004a6 <__eqsf2+0x2a>
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d003      	beq.n	80004a4 <__eqsf2+0x28>
 800049c:	42a2      	cmp	r2, r4
 800049e:	d101      	bne.n	80004a4 <__eqsf2+0x28>
 80004a0:	42b5      	cmp	r5, r6
 80004a2:	d006      	beq.n	80004b2 <__eqsf2+0x36>
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d1fc      	bne.n	80004a4 <__eqsf2+0x28>
 80004aa:	2cff      	cmp	r4, #255	; 0xff
 80004ac:	d1fa      	bne.n	80004a4 <__eqsf2+0x28>
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d1f8      	bne.n	80004a4 <__eqsf2+0x28>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d006      	beq.n	80004c4 <__eqsf2+0x48>
 80004b6:	2001      	movs	r0, #1
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d1f3      	bne.n	80004a4 <__eqsf2+0x28>
 80004bc:	0028      	movs	r0, r5
 80004be:	1e43      	subs	r3, r0, #1
 80004c0:	4198      	sbcs	r0, r3
 80004c2:	e7ef      	b.n	80004a4 <__eqsf2+0x28>
 80004c4:	2000      	movs	r0, #0
 80004c6:	e7ed      	b.n	80004a4 <__eqsf2+0x28>

080004c8 <__gesf2>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0042      	lsls	r2, r0, #1
 80004cc:	0245      	lsls	r5, r0, #9
 80004ce:	024e      	lsls	r6, r1, #9
 80004d0:	004c      	lsls	r4, r1, #1
 80004d2:	0fc3      	lsrs	r3, r0, #31
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	0e12      	lsrs	r2, r2, #24
 80004d8:	0a76      	lsrs	r6, r6, #9
 80004da:	0e24      	lsrs	r4, r4, #24
 80004dc:	0fc8      	lsrs	r0, r1, #31
 80004de:	2aff      	cmp	r2, #255	; 0xff
 80004e0:	d01b      	beq.n	800051a <__gesf2+0x52>
 80004e2:	2cff      	cmp	r4, #255	; 0xff
 80004e4:	d00e      	beq.n	8000504 <__gesf2+0x3c>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d11b      	bne.n	8000522 <__gesf2+0x5a>
 80004ea:	2c00      	cmp	r4, #0
 80004ec:	d101      	bne.n	80004f2 <__gesf2+0x2a>
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d01c      	beq.n	800052c <__gesf2+0x64>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d00c      	beq.n	8000510 <__gesf2+0x48>
 80004f6:	4283      	cmp	r3, r0
 80004f8:	d01c      	beq.n	8000534 <__gesf2+0x6c>
 80004fa:	2102      	movs	r1, #2
 80004fc:	1e58      	subs	r0, r3, #1
 80004fe:	4008      	ands	r0, r1
 8000500:	3801      	subs	r0, #1
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2e00      	cmp	r6, #0
 8000506:	d122      	bne.n	800054e <__gesf2+0x86>
 8000508:	2a00      	cmp	r2, #0
 800050a:	d1f4      	bne.n	80004f6 <__gesf2+0x2e>
 800050c:	2d00      	cmp	r5, #0
 800050e:	d1f2      	bne.n	80004f6 <__gesf2+0x2e>
 8000510:	2800      	cmp	r0, #0
 8000512:	d1f6      	bne.n	8000502 <__gesf2+0x3a>
 8000514:	2001      	movs	r0, #1
 8000516:	4240      	negs	r0, r0
 8000518:	e7f3      	b.n	8000502 <__gesf2+0x3a>
 800051a:	2d00      	cmp	r5, #0
 800051c:	d117      	bne.n	800054e <__gesf2+0x86>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d0f0      	beq.n	8000504 <__gesf2+0x3c>
 8000522:	2c00      	cmp	r4, #0
 8000524:	d1e7      	bne.n	80004f6 <__gesf2+0x2e>
 8000526:	2e00      	cmp	r6, #0
 8000528:	d1e5      	bne.n	80004f6 <__gesf2+0x2e>
 800052a:	e7e6      	b.n	80004fa <__gesf2+0x32>
 800052c:	2000      	movs	r0, #0
 800052e:	2d00      	cmp	r5, #0
 8000530:	d0e7      	beq.n	8000502 <__gesf2+0x3a>
 8000532:	e7e2      	b.n	80004fa <__gesf2+0x32>
 8000534:	42a2      	cmp	r2, r4
 8000536:	dc05      	bgt.n	8000544 <__gesf2+0x7c>
 8000538:	dbea      	blt.n	8000510 <__gesf2+0x48>
 800053a:	42b5      	cmp	r5, r6
 800053c:	d802      	bhi.n	8000544 <__gesf2+0x7c>
 800053e:	d3e7      	bcc.n	8000510 <__gesf2+0x48>
 8000540:	2000      	movs	r0, #0
 8000542:	e7de      	b.n	8000502 <__gesf2+0x3a>
 8000544:	4243      	negs	r3, r0
 8000546:	4158      	adcs	r0, r3
 8000548:	0040      	lsls	r0, r0, #1
 800054a:	3801      	subs	r0, #1
 800054c:	e7d9      	b.n	8000502 <__gesf2+0x3a>
 800054e:	2002      	movs	r0, #2
 8000550:	4240      	negs	r0, r0
 8000552:	e7d6      	b.n	8000502 <__gesf2+0x3a>

08000554 <__lesf2>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	0042      	lsls	r2, r0, #1
 8000558:	0245      	lsls	r5, r0, #9
 800055a:	024e      	lsls	r6, r1, #9
 800055c:	004c      	lsls	r4, r1, #1
 800055e:	0fc3      	lsrs	r3, r0, #31
 8000560:	0a6d      	lsrs	r5, r5, #9
 8000562:	0e12      	lsrs	r2, r2, #24
 8000564:	0a76      	lsrs	r6, r6, #9
 8000566:	0e24      	lsrs	r4, r4, #24
 8000568:	0fc8      	lsrs	r0, r1, #31
 800056a:	2aff      	cmp	r2, #255	; 0xff
 800056c:	d00b      	beq.n	8000586 <__lesf2+0x32>
 800056e:	2cff      	cmp	r4, #255	; 0xff
 8000570:	d00d      	beq.n	800058e <__lesf2+0x3a>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d11f      	bne.n	80005b6 <__lesf2+0x62>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d116      	bne.n	80005a8 <__lesf2+0x54>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d114      	bne.n	80005a8 <__lesf2+0x54>
 800057e:	2000      	movs	r0, #0
 8000580:	2d00      	cmp	r5, #0
 8000582:	d010      	beq.n	80005a6 <__lesf2+0x52>
 8000584:	e009      	b.n	800059a <__lesf2+0x46>
 8000586:	2d00      	cmp	r5, #0
 8000588:	d10c      	bne.n	80005a4 <__lesf2+0x50>
 800058a:	2cff      	cmp	r4, #255	; 0xff
 800058c:	d113      	bne.n	80005b6 <__lesf2+0x62>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d108      	bne.n	80005a4 <__lesf2+0x50>
 8000592:	2a00      	cmp	r2, #0
 8000594:	d008      	beq.n	80005a8 <__lesf2+0x54>
 8000596:	4283      	cmp	r3, r0
 8000598:	d012      	beq.n	80005c0 <__lesf2+0x6c>
 800059a:	2102      	movs	r1, #2
 800059c:	1e58      	subs	r0, r3, #1
 800059e:	4008      	ands	r0, r1
 80005a0:	3801      	subs	r0, #1
 80005a2:	e000      	b.n	80005a6 <__lesf2+0x52>
 80005a4:	2002      	movs	r0, #2
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f4      	bne.n	8000596 <__lesf2+0x42>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1fa      	bne.n	80005a6 <__lesf2+0x52>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f7      	b.n	80005a6 <__lesf2+0x52>
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d1ed      	bne.n	8000596 <__lesf2+0x42>
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1eb      	bne.n	8000596 <__lesf2+0x42>
 80005be:	e7ec      	b.n	800059a <__lesf2+0x46>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	dc05      	bgt.n	80005d0 <__lesf2+0x7c>
 80005c4:	dbf2      	blt.n	80005ac <__lesf2+0x58>
 80005c6:	42b5      	cmp	r5, r6
 80005c8:	d802      	bhi.n	80005d0 <__lesf2+0x7c>
 80005ca:	d3ef      	bcc.n	80005ac <__lesf2+0x58>
 80005cc:	2000      	movs	r0, #0
 80005ce:	e7ea      	b.n	80005a6 <__lesf2+0x52>
 80005d0:	4243      	negs	r3, r0
 80005d2:	4158      	adcs	r0, r3
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e5      	b.n	80005a6 <__lesf2+0x52>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__aeabi_i2f>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	2800      	cmp	r0, #0
 80005e0:	d013      	beq.n	800060a <__aeabi_i2f+0x2e>
 80005e2:	17c3      	asrs	r3, r0, #31
 80005e4:	18c6      	adds	r6, r0, r3
 80005e6:	405e      	eors	r6, r3
 80005e8:	0fc4      	lsrs	r4, r0, #31
 80005ea:	0030      	movs	r0, r6
 80005ec:	f000 f844 	bl	8000678 <__clzsi2>
 80005f0:	239e      	movs	r3, #158	; 0x9e
 80005f2:	0005      	movs	r5, r0
 80005f4:	1a1b      	subs	r3, r3, r0
 80005f6:	2b96      	cmp	r3, #150	; 0x96
 80005f8:	dc0f      	bgt.n	800061a <__aeabi_i2f+0x3e>
 80005fa:	2808      	cmp	r0, #8
 80005fc:	dd01      	ble.n	8000602 <__aeabi_i2f+0x26>
 80005fe:	3d08      	subs	r5, #8
 8000600:	40ae      	lsls	r6, r5
 8000602:	0276      	lsls	r6, r6, #9
 8000604:	0a76      	lsrs	r6, r6, #9
 8000606:	b2d8      	uxtb	r0, r3
 8000608:	e002      	b.n	8000610 <__aeabi_i2f+0x34>
 800060a:	2400      	movs	r4, #0
 800060c:	2000      	movs	r0, #0
 800060e:	2600      	movs	r6, #0
 8000610:	05c0      	lsls	r0, r0, #23
 8000612:	4330      	orrs	r0, r6
 8000614:	07e4      	lsls	r4, r4, #31
 8000616:	4320      	orrs	r0, r4
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	2b99      	cmp	r3, #153	; 0x99
 800061c:	dd0c      	ble.n	8000638 <__aeabi_i2f+0x5c>
 800061e:	2205      	movs	r2, #5
 8000620:	0031      	movs	r1, r6
 8000622:	1a12      	subs	r2, r2, r0
 8000624:	40d1      	lsrs	r1, r2
 8000626:	000a      	movs	r2, r1
 8000628:	0001      	movs	r1, r0
 800062a:	0030      	movs	r0, r6
 800062c:	311b      	adds	r1, #27
 800062e:	4088      	lsls	r0, r1
 8000630:	1e41      	subs	r1, r0, #1
 8000632:	4188      	sbcs	r0, r1
 8000634:	4302      	orrs	r2, r0
 8000636:	0016      	movs	r6, r2
 8000638:	2d05      	cmp	r5, #5
 800063a:	dc12      	bgt.n	8000662 <__aeabi_i2f+0x86>
 800063c:	0031      	movs	r1, r6
 800063e:	4f0d      	ldr	r7, [pc, #52]	; (8000674 <__aeabi_i2f+0x98>)
 8000640:	4039      	ands	r1, r7
 8000642:	0772      	lsls	r2, r6, #29
 8000644:	d009      	beq.n	800065a <__aeabi_i2f+0x7e>
 8000646:	200f      	movs	r0, #15
 8000648:	4030      	ands	r0, r6
 800064a:	2804      	cmp	r0, #4
 800064c:	d005      	beq.n	800065a <__aeabi_i2f+0x7e>
 800064e:	3104      	adds	r1, #4
 8000650:	014a      	lsls	r2, r1, #5
 8000652:	d502      	bpl.n	800065a <__aeabi_i2f+0x7e>
 8000654:	239f      	movs	r3, #159	; 0x9f
 8000656:	4039      	ands	r1, r7
 8000658:	1b5b      	subs	r3, r3, r5
 800065a:	0189      	lsls	r1, r1, #6
 800065c:	0a4e      	lsrs	r6, r1, #9
 800065e:	b2d8      	uxtb	r0, r3
 8000660:	e7d6      	b.n	8000610 <__aeabi_i2f+0x34>
 8000662:	1f6a      	subs	r2, r5, #5
 8000664:	4096      	lsls	r6, r2
 8000666:	0031      	movs	r1, r6
 8000668:	4f02      	ldr	r7, [pc, #8]	; (8000674 <__aeabi_i2f+0x98>)
 800066a:	4039      	ands	r1, r7
 800066c:	0772      	lsls	r2, r6, #29
 800066e:	d0f4      	beq.n	800065a <__aeabi_i2f+0x7e>
 8000670:	e7e9      	b.n	8000646 <__aeabi_i2f+0x6a>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	fbffffff 	.word	0xfbffffff

08000678 <__clzsi2>:
 8000678:	211c      	movs	r1, #28
 800067a:	2301      	movs	r3, #1
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0xe>
 8000682:	0c00      	lsrs	r0, r0, #16
 8000684:	3910      	subs	r1, #16
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	4298      	cmp	r0, r3
 800068a:	d301      	bcc.n	8000690 <__clzsi2+0x18>
 800068c:	0a00      	lsrs	r0, r0, #8
 800068e:	3908      	subs	r1, #8
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	4298      	cmp	r0, r3
 8000694:	d301      	bcc.n	800069a <__clzsi2+0x22>
 8000696:	0900      	lsrs	r0, r0, #4
 8000698:	3904      	subs	r1, #4
 800069a:	a202      	add	r2, pc, #8	; (adr r2, 80006a4 <__clzsi2+0x2c>)
 800069c:	5c10      	ldrb	r0, [r2, r0]
 800069e:	1840      	adds	r0, r0, r1
 80006a0:	4770      	bx	lr
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	02020304 	.word	0x02020304
 80006a8:	01010101 	.word	0x01010101
	...

080006b4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fd03 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f867 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f955 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c6:	f000 f8c5 	bl	8000854 <MX_I2C1_Init>
  MX_DMA_Init();
 80006ca:	f000 f933 	bl	8000934 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 f901 	bl	80008d4 <MX_USART2_UART_Init>

  //TO DO
  //TASK 6

  //setTime(sec, min, hour, dow, dom, month, year)
  setTime(36, 39, 23, 1, 19, 9, 22);
 80006d2:	2316      	movs	r3, #22
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2309      	movs	r3, #9
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2313      	movs	r3, #19
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	2217      	movs	r2, #23
 80006e2:	2127      	movs	r1, #39	; 0x27
 80006e4:	2024      	movs	r0, #36	; 0x24
 80006e6:	f000 fa15 	bl	8000b14 <setTime>
  while (1)
  {
    /* USER CODE END WHILE */
	//TO DO:

	getTime();
 80006ea:	f000 fa7d 	bl	8000be8 <getTime>
	int Epoch = epochFromTime(time);
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <main+0xc4>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	f000 fad0 	bl	8000c98 <epochFromTime>
 80006f8:	0003      	movs	r3, r0
 80006fa:	607b      	str	r3, [r7, #4]
//	  HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), 1000);
//	  sprintf(buffer3, "\r\nEPOCH: %d \r\n\n", epochFromTime(time));
//	  HAL_UART_Transmit(&huart2, buffer3, sizeof(buffer3), 1000);
//	  pause_sec(1);

	 sprintf(buffer, "\r\n %02d:%02d:%02d \r\n\r\n", time.hour, time.minutes, time.seconds);
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <main+0xc4>)
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	001a      	movs	r2, r3
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0xc4>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	001c      	movs	r4, r3
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <main+0xc4>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	491b      	ldr	r1, [pc, #108]	; (800077c <main+0xc8>)
 800070e:	481c      	ldr	r0, [pc, #112]	; (8000780 <main+0xcc>)
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	0023      	movs	r3, r4
 8000714:	f003 fc26 	bl	8003f64 <siprintf>
	 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4918      	ldr	r1, [pc, #96]	; (8000780 <main+0xcc>)
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0xd0>)
 8000720:	221e      	movs	r2, #30
 8000722:	f002 fca3 	bl	800306c <HAL_UART_Transmit>

	 sprintf(buffer, "%02d-%02d-20%02d \r\n\r\n", time.dayofmonth, time.month, time.year);
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <main+0xc4>)
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	001a      	movs	r2, r3
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0xc4>)
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	001c      	movs	r4, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0xc4>)
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	4914      	ldr	r1, [pc, #80]	; (8000788 <main+0xd4>)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0xcc>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	0023      	movs	r3, r4
 800073e:	f003 fc11 	bl	8003f64 <siprintf>
	 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8000742:	23fa      	movs	r3, #250	; 0xfa
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <main+0xcc>)
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0xd0>)
 800074a:	221e      	movs	r2, #30
 800074c:	f002 fc8e 	bl	800306c <HAL_UART_Transmit>

	 sprintf(buffer, "Epoch Time: %d \r\n", Epoch);
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	490e      	ldr	r1, [pc, #56]	; (800078c <main+0xd8>)
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <main+0xcc>)
 8000756:	0018      	movs	r0, r3
 8000758:	f003 fc04 	bl	8003f64 <siprintf>
	 HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800075c:	23fa      	movs	r3, #250	; 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <main+0xcc>)
 8000762:	4808      	ldr	r0, [pc, #32]	; (8000784 <main+0xd0>)
 8000764:	221e      	movs	r2, #30
 8000766:	f002 fc81 	bl	800306c <HAL_UART_Transmit>

	 pause_sec(1);
 800076a:	23fe      	movs	r3, #254	; 0xfe
 800076c:	059b      	lsls	r3, r3, #22
 800076e:	1c18      	adds	r0, r3, #0
 8000770:	f000 f976 	bl	8000a60 <pause_sec>
  {
 8000774:	e7b9      	b.n	80006ea <main+0x36>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	200001c0 	.word	0x200001c0
 800077c:	08004850 	.word	0x08004850
 8000780:	200001a0 	.word	0x200001a0
 8000784:	200000d8 	.word	0x200000d8
 8000788:	08004868 	.word	0x08004868
 800078c:	08004880 	.word	0x08004880

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b097      	sub	sp, #92	; 0x5c
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	2428      	movs	r4, #40	; 0x28
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2330      	movs	r3, #48	; 0x30
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f003 fbd7 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a6:	2318      	movs	r3, #24
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	2310      	movs	r3, #16
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 fbcf 	bl	8003f54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f003 fbc8 	bl	8003f54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	0021      	movs	r1, r4
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2210      	movs	r2, #16
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2202      	movs	r2, #2
 80007dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	22a0      	movs	r2, #160	; 0xa0
 80007e8:	0392      	lsls	r2, r2, #14
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fe9b 	bl	8002530 <HAL_RCC_OscConfig>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007fe:	f000 fad5 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	2118      	movs	r1, #24
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2207      	movs	r2, #7
 8000808:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2202      	movs	r2, #2
 800080e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2101      	movs	r1, #1
 8000820:	0018      	movs	r0, r3
 8000822:	f002 f99f 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800082a:	f000 fabf 	bl	8000dac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2220      	movs	r2, #32
 8000832:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fae3 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000846:	f000 fab1 	bl	8000dac <Error_Handler>
  }
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b017      	add	sp, #92	; 0x5c
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f86b 	bl	800196c <HAL_I2C_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 fa87 	bl	8000dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fdac 	bl	8002400 <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 fa7e 	bl	8000dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fdef 	bl	8002498 <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fa75 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40005400 	.word	0x40005400
 80008d0:	2000090e 	.word	0x2000090e

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	2296      	movs	r2, #150	; 0x96
 80008e2:	0192      	lsls	r2, r2, #6
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fb53 	bl	8002fc4 <HAL_UART_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 fa43 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000d8 	.word	0x200000d8
 8000930:	40004400 	.word	0x40004400

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DMA_Init+0x38>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_DMA_Init+0x38>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_DMA_Init+0x38>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200b      	movs	r0, #11
 8000958:	f000 fcc4 	bl	80012e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800095c:	200b      	movs	r0, #11
 800095e:	f000 fcd6 	bl	800130e <HAL_NVIC_EnableIRQ>

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b08b      	sub	sp, #44	; 0x2c
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	2414      	movs	r4, #20
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f003 fae7 	bl	8003f54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <MX_GPIO_Init+0xe8>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <MX_GPIO_Init+0xe8>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	03c9      	lsls	r1, r1, #15
 8000990:	430a      	orrs	r2, r1
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_GPIO_Init+0xe8>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	03db      	lsls	r3, r3, #15
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0289      	lsls	r1, r1, #10
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0309      	lsls	r1, r1, #12
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	031b      	lsls	r3, r3, #12
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	02c9      	lsls	r1, r1, #11
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_GPIO_Init+0xe8>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	02db      	lsls	r3, r3, #11
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <MX_GPIO_Init+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	0019      	movs	r1, r3
 8000a00:	f000 ff96 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2290      	movs	r2, #144	; 0x90
 8000a0e:	0352      	lsls	r2, r2, #13
 8000a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193a      	adds	r2, r7, r4
 8000a1a:	2390      	movs	r3, #144	; 0x90
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fe15 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a26:	0021      	movs	r1, r4
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	22c0      	movs	r2, #192	; 0xc0
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2201      	movs	r2, #1
 8000a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <MX_GPIO_Init+0xec>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f000 fe01 	bl	8001650 <HAL_GPIO_Init>

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b00b      	add	sp, #44	; 0x2c
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800

08000a60 <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* Delay program execution for x seconds */
	//TO DO:
	//TASK 2

	for (int i = 0;i<x;i++)						//this loop runs for however many seconds we want to waste
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e00c      	b.n	8000a88 <pause_sec+0x28>
	{											//i.e. if we want to waste 1 second, the loop runs once
		for (int j =0 ;j<8*DELAY1*DELAY2;j++)	//this loop wastes the right amount of clock cycles to waste 1 second
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	e002      	b.n	8000a7a <pause_sec+0x1a>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <pause_sec+0x48>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	ddf8      	ble.n	8000a74 <pause_sec+0x14>
	for (int i = 0;i<x;i++)						//this loop runs for however many seconds we want to waste
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff fda7 	bl	80005dc <__aeabi_i2f>
 8000a8e:	1c03      	adds	r3, r0, #0
 8000a90:	1c19      	adds	r1, r3, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fcde 	bl	8000454 <__aeabi_fcmpgt>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d1e8      	bne.n	8000a6e <pause_sec+0xe>
		{
		}
	}

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	0030ef7f 	.word	0x0030ef7f

08000aac <decToBcd>:

uint8_t decToBcd(int val)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    /* Convert normal decimal numbers to binary coded decimal*/
	//TO DO:
	//TASK 3

	return (uint8_t)((val/10*16) + (val%10));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	210a      	movs	r1, #10
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fbb9 	bl	8000230 <__divsi3>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	b2dc      	uxtb	r4, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	210a      	movs	r1, #10
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fc96 	bl	80003fc <__aeabi_idivmod>
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	18e3      	adds	r3, r4, r3
 8000ad6:	b2db      	uxtb	r3, r3
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b003      	add	sp, #12
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <bcdToDec>:

int bcdToDec(uint8_t val)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
    /* Convert binary coded decimal to normal decimal numbers */
	//TO DO:
	//TASK 3

	return (int)((val/16*10) + (val%16));
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	001a      	movs	r2, r3
 8000af6:	0013      	movs	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0019      	movs	r1, r3
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	220f      	movs	r2, #15
 8000b06:	4013      	ands	r3, r2
 8000b08:	18cb      	adds	r3, r1, r3
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <setTime>:

void setTime (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	0005      	movs	r5, r0
 8000b1c:	000c      	movs	r4, r1
 8000b1e:	0010      	movs	r0, r2
 8000b20:	0019      	movs	r1, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	1c2a      	adds	r2, r5, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	1dbb      	adds	r3, r7, #6
 8000b2a:	1c22      	adds	r2, r4, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	1d7b      	adds	r3, r7, #5
 8000b30:	1c02      	adds	r2, r0, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	1c0a      	adds	r2, r1, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	//TO DO:
	//TASK 4
	uint8_t set_time[7];

	//write each value to its specific register in the set_time remembering rtc uses bcd
	set_time[0] = decToBcd(sec);
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff ffb4 	bl	8000aac <decToBcd>
 8000b44:	0003      	movs	r3, r0
 8000b46:	001a      	movs	r2, r3
 8000b48:	2408      	movs	r4, #8
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	701a      	strb	r2, [r3, #0]
	set_time[1] = decToBcd(min);
 8000b4e:	1dbb      	adds	r3, r7, #6
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff ffaa 	bl	8000aac <decToBcd>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	705a      	strb	r2, [r3, #1]
	set_time[2] = decToBcd(hour);
 8000b60:	1d7b      	adds	r3, r7, #5
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ffa1 	bl	8000aac <decToBcd>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	709a      	strb	r2, [r3, #2]
	set_time[3] = decToBcd(dow);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ff98 	bl	8000aac <decToBcd>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	001a      	movs	r2, r3
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	70da      	strb	r2, [r3, #3]
	set_time[4] = decToBcd(dom);
 8000b84:	2320      	movs	r3, #32
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff8e 	bl	8000aac <decToBcd>
 8000b90:	0003      	movs	r3, r0
 8000b92:	001a      	movs	r2, r3
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	711a      	strb	r2, [r3, #4]
	set_time[5] = decToBcd(month);
 8000b98:	2324      	movs	r3, #36	; 0x24
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff84 	bl	8000aac <decToBcd>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	715a      	strb	r2, [r3, #5]
	set_time[6] = decToBcd(year);
 8000bac:	2328      	movs	r3, #40	; 0x28
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff7a 	bl	8000aac <decToBcd>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	001a      	movs	r2, r3
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000); //write the time to the clock
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <setTime+0xd0>)
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	2307      	movs	r3, #7
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	21d0      	movs	r1, #208	; 0xd0
 8000bd6:	f000 ff5f 	bl	8001a98 <HAL_I2C_Mem_Write>

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	2000008c 	.word	0x2000008c

08000be8 <getTime>:

void getTime (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
	//TO DO:
	//TASK 4
	uint8_t get_time[7];

	//HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000);
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000); //read the time from the clock
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <getTime+0xa8>)
 8000bf0:	23fa      	movs	r3, #250	; 0xfa
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	9302      	str	r3, [sp, #8]
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	2200      	movs	r2, #0
 8000c02:	21d0      	movs	r1, #208	; 0xd0
 8000c04:	f001 f876 	bl	8001cf4 <HAL_I2C_Mem_Read>

	//write the time read from the RTC and put it into the time structure
	time.seconds 	= 	bcdToDec(get_time[0]);
 8000c08:	003b      	movs	r3, r7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff67 	bl	8000ae0 <bcdToDec>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <getTime+0xac>)
 8000c18:	701a      	strb	r2, [r3, #0]
	time.minutes 	= 	bcdToDec(get_time[1]);
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff5e 	bl	8000ae0 <bcdToDec>
 8000c24:	0003      	movs	r3, r0
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <getTime+0xac>)
 8000c2a:	705a      	strb	r2, [r3, #1]
	time.hour		= 	bcdToDec(get_time[2]);
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff55 	bl	8000ae0 <bcdToDec>
 8000c36:	0003      	movs	r3, r0
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <getTime+0xac>)
 8000c3c:	709a      	strb	r2, [r3, #2]
	time.dayofweek 	= 	bcdToDec(get_time[3]);
 8000c3e:	003b      	movs	r3, r7
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff ff4c 	bl	8000ae0 <bcdToDec>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <getTime+0xac>)
 8000c4e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth	= 	bcdToDec(get_time[4]);
 8000c50:	003b      	movs	r3, r7
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff43 	bl	8000ae0 <bcdToDec>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <getTime+0xac>)
 8000c60:	711a      	strb	r2, [r3, #4]
	time.month		= 	bcdToDec(get_time[5]);
 8000c62:	003b      	movs	r3, r7
 8000c64:	795b      	ldrb	r3, [r3, #5]
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff ff3a 	bl	8000ae0 <bcdToDec>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <getTime+0xac>)
 8000c72:	715a      	strb	r2, [r3, #5]
	time.year		= 	bcdToDec(get_time[6]);
 8000c74:	003b      	movs	r3, r7
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <bcdToDec>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <getTime+0xac>)
 8000c84:	719a      	strb	r2, [r3, #6]
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	2000008c 	.word	0x2000008c
 8000c94:	200001c0 	.word	0x200001c0

08000c98 <epochFromTime>:

int epochFromTime(TIME time){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	6018      	str	r0, [r3, #0]
 8000ca2:	6059      	str	r1, [r3, #4]
    /* Convert time to UNIX epoch time */
	//TO DO:
	//TASK 5
	int day = time.dayofmonth;
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	623b      	str	r3, [r7, #32]
		int month = time.month;
 8000caa:	003b      	movs	r3, r7
 8000cac:	795b      	ldrb	r3, [r3, #5]
 8000cae:	61fb      	str	r3, [r7, #28]
	    int year = time.year;
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	61bb      	str	r3, [r7, #24]
	    int totalDays = day;
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24

	    switch(month){
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	2b0c      	cmp	r3, #12
 8000cbe:	d834      	bhi.n	8000d2a <epochFromTime+0x92>
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	009a      	lsls	r2, r3, #2
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <epochFromTime+0x10c>)
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	469f      	mov	pc, r3
	        case 1:                                      break;
	        case 2: totalDays += 31;                     break;
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	331f      	adds	r3, #31
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd2:	e02a      	b.n	8000d2a <epochFromTime+0x92>
	        case 3: totalDays += (28 + 31);              break;
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	333b      	adds	r3, #59	; 0x3b
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cda:	e026      	b.n	8000d2a <epochFromTime+0x92>
	        case 4: totalDays += (28 + 31*2);            break;
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	335a      	adds	r3, #90	; 0x5a
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	e022      	b.n	8000d2a <epochFromTime+0x92>
	        case 5: totalDays += (28 + 30 + 31*2);       break;
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	3378      	adds	r3, #120	; 0x78
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	e01e      	b.n	8000d2a <epochFromTime+0x92>
	        case 6: totalDays += (28 + 30 + 31*3);       break;
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	3397      	adds	r3, #151	; 0x97
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf2:	e01a      	b.n	8000d2a <epochFromTime+0x92>
	        case 7: totalDays += (28 + 30*2 + 31*3);     break;
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	33b5      	adds	r3, #181	; 0xb5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	e016      	b.n	8000d2a <epochFromTime+0x92>
	        case 8: totalDays += (28 + 30*2 + 31*4);     break;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	33d4      	adds	r3, #212	; 0xd4
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	e012      	b.n	8000d2a <epochFromTime+0x92>
	        case 9: totalDays += (28 + 30*2 + 31*5);     break;
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	33f3      	adds	r3, #243	; 0xf3
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0a:	e00e      	b.n	8000d2a <epochFromTime+0x92>
	        case 10: totalDays += (28 + 30*3 + 31*5);    break;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	3312      	adds	r3, #18
 8000d10:	33ff      	adds	r3, #255	; 0xff
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	e009      	b.n	8000d2a <epochFromTime+0x92>
	        case 11: totalDays += (28 + 30*3 + 31*6);    break;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	3331      	adds	r3, #49	; 0x31
 8000d1a:	33ff      	adds	r3, #255	; 0xff
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	e004      	b.n	8000d2a <epochFromTime+0x92>
	        case 12: totalDays += (28 + 30*4 + 31*6);    break;
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	334f      	adds	r3, #79	; 0x4f
 8000d24:	33ff      	adds	r3, #255	; 0xff
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	46c0      	nop			; (mov r8, r8)
	        default: totalDays = totalDays;
	    }

	    int seconds = time.seconds;
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	617b      	str	r3, [r7, #20]
	    int minutes = time.minutes;
 8000d30:	003b      	movs	r3, r7
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	613b      	str	r3, [r7, #16]
	    int hours = time.hour;
 8000d36:	003b      	movs	r3, r7
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	60fb      	str	r3, [r7, #12]

	    int totalSeconds = (year-22)*31536000 + totalDays*86400 + hours*3600 + minutes*60 + seconds;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	3b16      	subs	r3, #22
 8000d40:	001a      	movs	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	189b      	adds	r3, r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	011a      	lsls	r2, r3, #4
 8000d52:	1ad2      	subs	r2, r2, r3
 8000d54:	01d3      	lsls	r3, r2, #7
 8000d56:	001a      	movs	r2, r3
 8000d58:	0011      	movs	r1, r2
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	011a      	lsls	r2, r3, #4
 8000d64:	1ad2      	subs	r2, r2, r3
 8000d66:	0113      	lsls	r3, r2, #4
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	18c9      	adds	r1, r1, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	0013      	movs	r3, r2
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	011a      	lsls	r2, r3, #4
 8000d78:	1ad2      	subs	r2, r2, r3
 8000d7a:	0113      	lsls	r3, r2, #4
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	18c9      	adds	r1, r1, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	0013      	movs	r3, r2
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	18cb      	adds	r3, r1, r3
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	60bb      	str	r3, [r7, #8]

		return EPOCH_2022 + totalSeconds ;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <epochFromTime+0x110>)
 8000d98:	4694      	mov	ip, r2
 8000d9a:	4463      	add	r3, ip
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b00a      	add	sp, #40	; 0x28
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	080048b4 	.word	0x080048b4
 8000da8:	61cf7d60 	.word	0x61cf7d60

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x44>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x44>)
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_MspInit+0x44>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0549      	lsls	r1, r1, #21
 8000de0:	430a      	orrs	r2, r1
 8000de2:	61da      	str	r2, [r3, #28]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_MspInit+0x44>)
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	4013      	ands	r3, r2
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	2414      	movs	r4, #20
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f003 f89e 	bl	8003f54 <memset>
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_I2C_MspInit+0x90>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d131      	bne.n	8000e86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	02c9      	lsls	r1, r1, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	02db      	lsls	r3, r3, #11
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	0021      	movs	r1, r4
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	22c0      	movs	r2, #192	; 0xc0
 8000e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2212      	movs	r2, #18
 8000e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2203      	movs	r2, #3
 8000e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_I2C_MspInit+0x98>)
 8000e62:	0019      	movs	r1, r3
 8000e64:	0010      	movs	r0, r2
 8000e66:	f000 fbf3 	bl	8001650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0389      	lsls	r1, r1, #14
 8000e74:	430a      	orrs	r2, r1
 8000e76:	61da      	str	r2, [r3, #28]
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_I2C_MspInit+0x94>)
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	039b      	lsls	r3, r3, #14
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b00b      	add	sp, #44	; 0x2c
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b08b      	sub	sp, #44	; 0x2c
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	2414      	movs	r4, #20
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2314      	movs	r3, #20
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f003 f850 	bl	8003f54 <memset>
  if(huart->Instance==USART2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_UART_MspInit+0xec>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d160      	bne.n	8000f80 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	61da      	str	r2, [r3, #28]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000ece:	69da      	ldr	r2, [r3, #28]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	0289      	lsls	r1, r1, #10
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_UART_MspInit+0xf0>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2202      	movs	r2, #2
 8000f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2201      	movs	r2, #1
 8000f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	2390      	movs	r3, #144	; 0x90
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fb96 	bl	8001650 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_UART_MspInit+0xf8>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 f9f6 	bl	8001348 <HAL_DMA_Init>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000f60:	f7ff ff24 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f68:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_UART_MspInit+0xf4>)
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	201c      	movs	r0, #28
 8000f76:	f000 f9b5 	bl	80012e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7a:	201c      	movs	r0, #28
 8000f7c:	f000 f9c7 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b00b      	add	sp, #44	; 0x2c
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	2000015c 	.word	0x2000015c
 8000f94:	40020044 	.word	0x40020044

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8ca 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <DMA1_Channel4_5_IRQHandler+0x14>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fa7f 	bl	80014d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	2000015c 	.word	0x2000015c

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <USART2_IRQHandler+0x14>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f002 f8ea 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	200000d8 	.word	0x200000d8

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f002 ff6a 	bl	8003f00 <__errno>
 800102c:	0003      	movs	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	2301      	movs	r3, #1
 8001034:	425b      	negs	r3, r3
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	18d2      	adds	r2, r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20002000 	.word	0x20002000
 8001058:	00000400 	.word	0x00000400
 800105c:	200001c8 	.word	0x200001c8
 8001060:	200001e0 	.word	0x200001e0

08001064 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001072:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800109a:	f7ff ffe3 	bl	8001064 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800109e:	f002 ff35 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff fb07 	bl	80006b4 <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   r0, =_estack
 80010a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b4:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 80010b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010bc:	200001e0 	.word	0x200001e0

080010c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_COMP_IRQHandler>
	...

080010c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_Init+0x24>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_Init+0x24>)
 80010ce:	2110      	movs	r1, #16
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f809 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fe6d 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_InitTick+0x5c>)
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	0019      	movs	r1, r3
 80010fe:	23fa      	movs	r3, #250	; 0xfa
 8001100:	0098      	lsls	r0, r3, #2
 8001102:	f7ff f80b 	bl	800011c <__udivsi3>
 8001106:	0003      	movs	r3, r0
 8001108:	0019      	movs	r1, r3
 800110a:	0020      	movs	r0, r4
 800110c:	f7ff f806 	bl	800011c <__udivsi3>
 8001110:	0003      	movs	r3, r0
 8001112:	0018      	movs	r0, r3
 8001114:	f000 f90b 	bl	800132e <HAL_SYSTICK_Config>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00f      	b.n	8001140 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d80b      	bhi.n	800113e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	2301      	movs	r3, #1
 800112a:	425b      	negs	r3, r3
 800112c:	2200      	movs	r2, #0
 800112e:	0018      	movs	r0, r3
 8001130:	f000 f8d8 	bl	80012e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_InitTick+0x64>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b003      	add	sp, #12
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x1c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x20>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	18d2      	adds	r2, r2, r3
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_IncTick+0x20>)
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	20000008 	.word	0x20000008
 8001174:	200001cc 	.word	0x200001cc

08001178 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <HAL_GetTick+0x10>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	200001cc 	.word	0x200001cc

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b7f      	cmp	r3, #127	; 0x7f
 800119e:	d809      	bhi.n	80011b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	231f      	movs	r3, #31
 80011a8:	401a      	ands	r2, r3
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_EnableIRQ+0x30>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	4091      	lsls	r1, r2
 80011b0:	000a      	movs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
  }
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	0002      	movs	r2, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b7f      	cmp	r3, #127	; 0x7f
 80011d4:	d828      	bhi.n	8001228 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <__NVIC_SetPriority+0xd4>)
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	33c0      	adds	r3, #192	; 0xc0
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	589b      	ldr	r3, [r3, r2]
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	0011      	movs	r1, r2
 80011ec:	2203      	movs	r2, #3
 80011ee:	400a      	ands	r2, r1
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	4091      	lsls	r1, r2
 80011f6:	000a      	movs	r2, r1
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	401a      	ands	r2, r3
 80011fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	019b      	lsls	r3, r3, #6
 8001202:	22ff      	movs	r2, #255	; 0xff
 8001204:	401a      	ands	r2, r3
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	2303      	movs	r3, #3
 800120e:	4003      	ands	r3, r0
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001214:	481f      	ldr	r0, [pc, #124]	; (8001294 <__NVIC_SetPriority+0xd4>)
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	430a      	orrs	r2, r1
 8001220:	33c0      	adds	r3, #192	; 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001226:	e031      	b.n	800128c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <__NVIC_SetPriority+0xd8>)
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0019      	movs	r1, r3
 8001230:	230f      	movs	r3, #15
 8001232:	400b      	ands	r3, r1
 8001234:	3b08      	subs	r3, #8
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3306      	adds	r3, #6
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	3304      	adds	r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1dfa      	adds	r2, r7, #7
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	0011      	movs	r1, r2
 8001248:	2203      	movs	r2, #3
 800124a:	400a      	ands	r2, r1
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	21ff      	movs	r1, #255	; 0xff
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	43d2      	mvns	r2, r2
 8001256:	401a      	ands	r2, r3
 8001258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	22ff      	movs	r2, #255	; 0xff
 8001260:	401a      	ands	r2, r3
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0018      	movs	r0, r3
 8001268:	2303      	movs	r3, #3
 800126a:	4003      	ands	r3, r0
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <__NVIC_SetPriority+0xd8>)
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	001c      	movs	r4, r3
 8001278:	230f      	movs	r3, #15
 800127a:	4023      	ands	r3, r4
 800127c:	3b08      	subs	r3, #8
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	430a      	orrs	r2, r1
 8001282:	3306      	adds	r3, #6
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	18c3      	adds	r3, r0, r3
 8001288:	3304      	adds	r3, #4
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b003      	add	sp, #12
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	045b      	lsls	r3, r3, #17
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d301      	bcc.n	80012b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b0:	2301      	movs	r3, #1
 80012b2:	e010      	b.n	80012d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <SysTick_Config+0x44>)
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	3a01      	subs	r2, #1
 80012ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012bc:	2301      	movs	r3, #1
 80012be:	425b      	negs	r3, r3
 80012c0:	2103      	movs	r1, #3
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff ff7c 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x44>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	210f      	movs	r1, #15
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	1c02      	adds	r2, r0, #0
 80012f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	0002      	movs	r2, r0
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ff33 	bl	800118c <__NVIC_EnableIRQ>
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ffaf 	bl	800129c <SysTick_Config>
 800133e:	0003      	movs	r3, r0
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e036      	b.n	80013cc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2221      	movs	r2, #33	; 0x21
 8001362:	2102      	movs	r1, #2
 8001364:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_DMA_Init+0x8c>)
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800137e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f932 	bl	8001618 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2221      	movs	r2, #33	; 0x21
 80013be:	2101      	movs	r1, #1
 80013c0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}  
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b004      	add	sp, #16
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	ffffc00f 	.word	0xffffc00f

080013d8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2221      	movs	r2, #33	; 0x21
 80013e4:	5c9b      	ldrb	r3, [r3, r2]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d008      	beq.n	80013fe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	2100      	movs	r1, #0
 80013f8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e020      	b.n	8001440 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	210e      	movs	r1, #14
 800140a:	438a      	bics	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	438a      	bics	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	2101      	movs	r1, #1
 8001428:	4091      	lsls	r1, r2
 800142a:	000a      	movs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2221      	movs	r2, #33	; 0x21
 8001432:	2101      	movs	r1, #1
 8001434:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	2100      	movs	r1, #0
 800143c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001450:	210f      	movs	r1, #15
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2221      	movs	r2, #33	; 0x21
 800145c:	5c9b      	ldrb	r3, [r3, r2]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d006      	beq.n	8001472 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e028      	b.n	80014c4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	210e      	movs	r1, #14
 800147e:	438a      	bics	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	438a      	bics	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	2101      	movs	r1, #1
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2221      	movs	r2, #33	; 0x21
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	0010      	movs	r0, r2
 80014c2:	4798      	blx	r3
    } 
  }
  return status;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2204      	movs	r2, #4
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	d024      	beq.n	8001544 <HAL_DMA_IRQHandler+0x72>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2204      	movs	r2, #4
 80014fe:	4013      	ands	r3, r2
 8001500:	d020      	beq.n	8001544 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2220      	movs	r2, #32
 800150a:	4013      	ands	r3, r2
 800150c:	d107      	bne.n	800151e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2104      	movs	r1, #4
 800151a:	438a      	bics	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	2104      	movs	r1, #4
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	2b00      	cmp	r3, #0
 8001534:	d100      	bne.n	8001538 <HAL_DMA_IRQHandler+0x66>
 8001536:	e06a      	b.n	800160e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	0010      	movs	r0, r2
 8001540:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001542:	e064      	b.n	800160e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2202      	movs	r2, #2
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	d02b      	beq.n	80015ac <HAL_DMA_IRQHandler+0xda>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d027      	beq.n	80015ac <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2220      	movs	r2, #32
 8001564:	4013      	ands	r3, r2
 8001566:	d10b      	bne.n	8001580 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	210a      	movs	r1, #10
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2221      	movs	r2, #33	; 0x21
 800157c:	2101      	movs	r1, #1
 800157e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2102      	movs	r1, #2
 800158a:	4091      	lsls	r1, r2
 800158c:	000a      	movs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	2b00      	cmp	r3, #0
 800159e:	d036      	beq.n	800160e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	0010      	movs	r0, r2
 80015a8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015aa:	e030      	b.n	800160e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2208      	movs	r2, #8
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	d028      	beq.n	800160e <HAL_DMA_IRQHandler+0x13c>
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2208      	movs	r2, #8
 80015c0:	4013      	ands	r3, r2
 80015c2:	d024      	beq.n	800160e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	210e      	movs	r1, #14
 80015d0:	438a      	bics	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015dc:	2101      	movs	r1, #1
 80015de:	4091      	lsls	r1, r2
 80015e0:	000a      	movs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2221      	movs	r2, #33	; 0x21
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	0010      	movs	r0, r2
 800160a:	4798      	blx	r3
    }
   }
}  
 800160c:	e7ff      	b.n	800160e <HAL_DMA_IRQHandler+0x13c>
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <DMA_CalcBaseAndBitshift+0x30>)
 8001626:	4694      	mov	ip, r2
 8001628:	4463      	add	r3, ip
 800162a:	2114      	movs	r1, #20
 800162c:	0018      	movs	r0, r3
 800162e:	f7fe fd75 	bl	800011c <__udivsi3>
 8001632:	0003      	movs	r3, r0
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a03      	ldr	r2, [pc, #12]	; (800164c <DMA_CalcBaseAndBitshift+0x34>)
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}
 8001648:	bffdfff8 	.word	0xbffdfff8
 800164c:	40020000 	.word	0x40020000

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e14f      	b.n	8001900 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <HAL_GPIO_Init+0x28>
 8001676:	e140      	b.n	80018fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	4013      	ands	r3, r2
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	409a      	lsls	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	2201      	movs	r2, #1
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	43da      	mvns	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	4013      	ands	r3, r2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	58d3      	ldr	r3, [r2, r3]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2207      	movs	r2, #7
 800174c:	4013      	ands	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2107      	movs	r1, #7
 8001766:	400b      	ands	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	029b      	lsls	r3, r3, #10
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_Init+0x174>
 80017c2:	e09a      	b.n	80018fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b54      	ldr	r3, [pc, #336]	; (8001918 <HAL_GPIO_Init+0x2c8>)
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_GPIO_Init+0x2c8>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	619a      	str	r2, [r3, #24]
 80017d0:	4b51      	ldr	r3, [pc, #324]	; (8001918 <HAL_GPIO_Init+0x2c8>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_GPIO_Init+0x2cc>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	589b      	ldr	r3, [r3, r2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	43da      	mvns	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	2390      	movs	r3, #144	; 0x90
 8001804:	05db      	lsls	r3, r3, #23
 8001806:	429a      	cmp	r2, r3
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x1e2>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a44      	ldr	r2, [pc, #272]	; (8001920 <HAL_GPIO_Init+0x2d0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x1de>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a43      	ldr	r2, [pc, #268]	; (8001924 <HAL_GPIO_Init+0x2d4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x1da>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a42      	ldr	r2, [pc, #264]	; (8001928 <HAL_GPIO_Init+0x2d8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x1d6>
 8001822:	2303      	movs	r3, #3
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x1e4>
 8001826:	2305      	movs	r3, #5
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x1e4>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x1e4>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x1e4>
 8001832:	2300      	movs	r3, #0
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	2103      	movs	r1, #3
 8001838:	400a      	ands	r2, r1
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_GPIO_Init+0x2cc>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_GPIO_Init+0x2dc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_GPIO_Init+0x2dc>)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_GPIO_Init+0x2dc>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43da      	mvns	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	035b      	lsls	r3, r3, #13
 80018be:	4013      	ands	r3, r2
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43da      	mvns	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	039b      	lsls	r3, r3, #14
 80018e8:	4013      	ands	r3, r2
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	40da      	lsrs	r2, r3
 8001908:	1e13      	subs	r3, r2, #0
 800190a:	d000      	beq.n	800190e <HAL_GPIO_Init+0x2be>
 800190c:	e6a8      	b.n	8001660 <HAL_GPIO_Init+0x10>
  } 
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000800 	.word	0x48000800
 8001928:	48000c00 	.word	0x48000c00
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	0008      	movs	r0, r1
 800193a:	0011      	movs	r1, r2
 800193c:	1cbb      	adds	r3, r7, #2
 800193e:	1c02      	adds	r2, r0, #0
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	1c7b      	adds	r3, r7, #1
 8001944:	1c0a      	adds	r2, r1, #0
 8001946:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	1c7b      	adds	r3, r7, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	881a      	ldrh	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001958:	e003      	b.n	8001962 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e082      	b.n	8001a84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2241      	movs	r2, #65	; 0x41
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2240      	movs	r2, #64	; 0x40
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fa33 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2241      	movs	r2, #65	; 0x41
 800199e:	2124      	movs	r1, #36	; 0x24
 80019a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	438a      	bics	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_I2C_Init+0x120>)
 80019bc:	400a      	ands	r2, r1
 80019be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4931      	ldr	r1, [pc, #196]	; (8001a90 <HAL_I2C_Init+0x124>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d108      	bne.n	80019ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	0209      	lsls	r1, r1, #8
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e007      	b.n	80019fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2184      	movs	r1, #132	; 0x84
 80019f4:	0209      	lsls	r1, r1, #8
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d104      	bne.n	8001a0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	491f      	ldr	r1, [pc, #124]	; (8001a94 <HAL_I2C_Init+0x128>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	491a      	ldr	r1, [pc, #104]	; (8001a90 <HAL_I2C_Init+0x124>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69d9      	ldr	r1, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2241      	movs	r2, #65	; 0x41
 8001a70:	2120      	movs	r1, #32
 8001a72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2242      	movs	r2, #66	; 0x42
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	f0ffffff 	.word	0xf0ffffff
 8001a90:	ffff7fff 	.word	0xffff7fff
 8001a94:	02008000 	.word	0x02008000

08001a98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	000c      	movs	r4, r1
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	1c22      	adds	r2, r4, #0
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	2308      	movs	r3, #8
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	1c0a      	adds	r2, r1, #0
 8001aba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2241      	movs	r2, #65	; 0x41
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d000      	beq.n	8001aca <HAL_I2C_Mem_Write+0x32>
 8001ac8:	e10c      	b.n	8001ce4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_I2C_Mem_Write+0x42>
 8001ad0:	232c      	movs	r3, #44	; 0x2c
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0ff      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	5c9b      	ldrb	r3, [r3, r2]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_I2C_Mem_Write+0x5c>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0f8      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	2101      	movs	r1, #1
 8001afa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001afc:	f7ff fb3c 	bl	8001178 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	0219      	lsls	r1, r3, #8
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2319      	movs	r3, #25
 8001b10:	2201      	movs	r2, #1
 8001b12:	f000 fb0b 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0e3      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	2121      	movs	r1, #33	; 0x21
 8001b24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2242      	movs	r2, #66	; 0x42
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	222c      	movs	r2, #44	; 0x2c
 8001b3e:	18ba      	adds	r2, r7, r2
 8001b40:	8812      	ldrh	r2, [r2, #0]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b4a:	1dbb      	adds	r3, r7, #6
 8001b4c:	881c      	ldrh	r4, [r3, #0]
 8001b4e:	2308      	movs	r3, #8
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	230a      	movs	r3, #10
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	8819      	ldrh	r1, [r3, #0]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	0023      	movs	r3, r4
 8001b66:	f000 f9f9 	bl	8001f5c <I2C_RequestMemoryWrite>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0b5      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d911      	bls.n	8001ba8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	045c      	lsls	r4, r3, #17
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 fbf7 	bl	8002394 <I2C_TransferConfig>
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 fbe3 	bl	8002394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fae8 	bl	80021aa <I2C_WaitOnTXISFlagUntilTimeout>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e081      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03a      	beq.n	8001c92 <HAL_I2C_Mem_Write+0x1fa>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d136      	bne.n	8001c92 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	f000 fa7b 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e053      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2bff      	cmp	r3, #255	; 0xff
 8001c46:	d911      	bls.n	8001c6c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	045c      	lsls	r4, r3, #17
 8001c58:	230a      	movs	r3, #10
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	8819      	ldrh	r1, [r3, #0]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	0023      	movs	r3, r4
 8001c66:	f000 fb95 	bl	8002394 <I2C_TransferConfig>
 8001c6a:	e012      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	049c      	lsls	r4, r3, #18
 8001c80:	230a      	movs	r3, #10
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	8819      	ldrh	r1, [r3, #0]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	0023      	movs	r3, r4
 8001c8e:	f000 fb81 	bl	8002394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d198      	bne.n	8001bce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fac0 	bl	8002228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e01a      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <HAL_I2C_Mem_Write+0x258>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2241      	movs	r2, #65	; 0x41
 8001ccc:	2120      	movs	r1, #32
 8001cce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2242      	movs	r2, #66	; 0x42
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
  }
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b007      	add	sp, #28
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	fe00e800 	.word	0xfe00e800

08001cf4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	000c      	movs	r4, r1
 8001cfe:	0010      	movs	r0, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	1c22      	adds	r2, r4, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	1c02      	adds	r2, r0, #0
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	1dbb      	adds	r3, r7, #6
 8001d14:	1c0a      	adds	r2, r1, #0
 8001d16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2241      	movs	r2, #65	; 0x41
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d000      	beq.n	8001d26 <HAL_I2C_Mem_Read+0x32>
 8001d24:	e110      	b.n	8001f48 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_I2C_Mem_Read+0x42>
 8001d2c:	232c      	movs	r3, #44	; 0x2c
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e103      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	5c9b      	ldrb	r3, [r3, r2]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2C_Mem_Read+0x5c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0fc      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	2101      	movs	r1, #1
 8001d56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d58:	f7ff fa0e 	bl	8001178 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	0219      	lsls	r1, r3, #8
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2319      	movs	r3, #25
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f000 f9dd 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0e7      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2241      	movs	r2, #65	; 0x41
 8001d7e:	2122      	movs	r1, #34	; 0x22
 8001d80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2242      	movs	r2, #66	; 0x42
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	222c      	movs	r2, #44	; 0x2c
 8001d9a:	18ba      	adds	r2, r7, r2
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	881c      	ldrh	r4, [r3, #0]
 8001daa:	2308      	movs	r3, #8
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	230a      	movs	r3, #10
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	8819      	ldrh	r1, [r3, #0]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	0023      	movs	r3, r4
 8001dc2:	f000 f92f 	bl	8002024 <I2C_RequestMemoryRead>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0b9      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2bff      	cmp	r3, #255	; 0xff
 8001dde:	d911      	bls.n	8001e04 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	22ff      	movs	r2, #255	; 0xff
 8001de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	045c      	lsls	r4, r3, #17
 8001df0:	230a      	movs	r3, #10
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	8819      	ldrh	r1, [r3, #0]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <HAL_I2C_Mem_Read+0x260>)
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	f000 fac9 	bl	8002394 <I2C_TransferConfig>
 8001e02:	e012      	b.n	8001e2a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	049c      	lsls	r4, r3, #18
 8001e18:	230a      	movs	r3, #10
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	8819      	ldrh	r1, [r3, #0]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_I2C_Mem_Read+0x260>)
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	0023      	movs	r3, r4
 8001e26:	f000 fab5 	bl	8002394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	0013      	movs	r3, r2
 8001e34:	2200      	movs	r2, #0
 8001e36:	2104      	movs	r1, #4
 8001e38:	f000 f978 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	1e03      	subs	r3, r0, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e082      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03a      	beq.n	8001ef6 <HAL_I2C_Mem_Read+0x202>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d136      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	0013      	movs	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	f000 f949 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e053      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d911      	bls.n	8001ed0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	22ff      	movs	r2, #255	; 0xff
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	045c      	lsls	r4, r3, #17
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	8819      	ldrh	r1, [r3, #0]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	0023      	movs	r3, r4
 8001eca:	f000 fa63 	bl	8002394 <I2C_TransferConfig>
 8001ece:	e012      	b.n	8001ef6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	049c      	lsls	r4, r3, #18
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	8819      	ldrh	r1, [r3, #0]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	0023      	movs	r3, r4
 8001ef2:	f000 fa4f 	bl	8002394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d194      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f98e 	bl	8002228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e01a      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	490c      	ldr	r1, [pc, #48]	; (8001f58 <HAL_I2C_Mem_Read+0x264>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2241      	movs	r2, #65	; 0x41
 8001f30:	2120      	movs	r1, #32
 8001f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2242      	movs	r2, #66	; 0x42
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b007      	add	sp, #28
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	80002400 	.word	0x80002400
 8001f58:	fe00e800 	.word	0xfe00e800

08001f5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	000c      	movs	r4, r1
 8001f66:	0010      	movs	r0, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	250a      	movs	r5, #10
 8001f6c:	197b      	adds	r3, r7, r5
 8001f6e:	1c22      	adds	r2, r4, #0
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	2308      	movs	r3, #8
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	1c02      	adds	r2, r0, #0
 8001f78:	801a      	strh	r2, [r3, #0]
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	1c0a      	adds	r2, r1, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	045c      	lsls	r4, r3, #17
 8001f8a:	197b      	adds	r3, r7, r5
 8001f8c:	8819      	ldrh	r1, [r3, #0]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <I2C_RequestMemoryWrite+0xc4>)
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	0023      	movs	r3, r4
 8001f96:	f000 f9fd 	bl	8002394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f902 	bl	80021aa <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e033      	b.n	8002016 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc4:	e019      	b.n	8001ffa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f8e3 	bl	80021aa <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe4:	1e03      	subs	r3, r0, #0
 8001fe6:	d001      	beq.n	8001fec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e014      	b.n	8002016 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fec:	2308      	movs	r3, #8
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	0013      	movs	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	f000 f890 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d001      	beq.n	8002014 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b004      	add	sp, #16
 800201c:	bdb0      	pop	{r4, r5, r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	80002000 	.word	0x80002000

08002024 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	000c      	movs	r4, r1
 800202e:	0010      	movs	r0, r2
 8002030:	0019      	movs	r1, r3
 8002032:	250a      	movs	r5, #10
 8002034:	197b      	adds	r3, r7, r5
 8002036:	1c22      	adds	r2, r4, #0
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	2308      	movs	r3, #8
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	1c02      	adds	r2, r0, #0
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	1dbb      	adds	r3, r7, #6
 8002044:	1c0a      	adds	r2, r1, #0
 8002046:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	197b      	adds	r3, r7, r5
 8002050:	8819      	ldrh	r1, [r3, #0]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <I2C_RequestMemoryRead+0xc0>)
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	f000 f99b 	bl	8002394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f8a0 	bl	80021aa <I2C_WaitOnTXISFlagUntilTimeout>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e033      	b.n	80020da <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800207a:	2308      	movs	r3, #8
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
 8002088:	e019      	b.n	80020be <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800208a:	2308      	movs	r3, #8
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	b29b      	uxth	r3, r3
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	6a39      	ldr	r1, [r7, #32]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f881 	bl	80021aa <I2C_WaitOnTXISFlagUntilTimeout>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e014      	b.n	80020da <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020b0:	2308      	movs	r3, #8
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020be:	6a3a      	ldr	r2, [r7, #32]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	0013      	movs	r3, r2
 80020c8:	2200      	movs	r2, #0
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	f000 f82e 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	80002000 	.word	0x80002000

080020e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d103      	bne.n	8002106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	2b01      	cmp	r3, #1
 8002112:	d007      	beq.n	8002124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	619a      	str	r2, [r3, #24]
  }
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800213c:	e021      	b.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	d01e      	beq.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff f818 	bl	8001178 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d113      	bne.n	8002182 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	2220      	movs	r2, #32
 8002160:	431a      	orrs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2241      	movs	r2, #65	; 0x41
 800216a:	2120      	movs	r1, #32
 800216c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2242      	movs	r2, #66	; 0x42
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	425a      	negs	r2, r3
 8002192:	4153      	adcs	r3, r2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	001a      	movs	r2, r3
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d0ce      	beq.n	800213e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bd80      	pop	{r7, pc}

080021aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021b6:	e02b      	b.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f86e 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e029      	b.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3301      	adds	r3, #1
 80021d0:	d01e      	beq.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	f7fe ffd1 	bl	8001178 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d302      	bcc.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d113      	bne.n	8002210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	2220      	movs	r2, #32
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2242      	movs	r2, #66	; 0x42
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e007      	b.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d1cc      	bne.n	80021b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002234:	e028      	b.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f82f 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e026      	b.n	8002298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7fe ff95 	bl	8001178 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d113      	bne.n	8002288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	2220      	movs	r2, #32
 8002266:	431a      	orrs	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2241      	movs	r2, #65	; 0x41
 8002270:	2120      	movs	r1, #32
 8002272:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2242      	movs	r2, #66	; 0x42
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2220      	movs	r2, #32
 8002290:	4013      	ands	r3, r2
 8002292:	2b20      	cmp	r3, #32
 8002294:	d1cf      	bne.n	8002236 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2210      	movs	r2, #16
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d164      	bne.n	8002384 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	049b      	lsls	r3, r3, #18
 80022c4:	401a      	ands	r2, r3
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	049b      	lsls	r3, r3, #18
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d02b      	beq.n	8002326 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	01c9      	lsls	r1, r1, #7
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	e021      	b.n	8002326 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	d01e      	beq.n	8002326 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e8:	f7fe ff46 	bl	8001178 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d302      	bcc.n	80022fe <I2C_IsAcknowledgeFailed+0x5e>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d113      	bne.n	8002326 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	2220      	movs	r2, #32
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2241      	movs	r2, #65	; 0x41
 800230e:	2120      	movs	r1, #32
 8002310:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2242      	movs	r2, #66	; 0x42
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e02f      	b.n	8002386 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2220      	movs	r2, #32
 800232e:	4013      	ands	r3, r2
 8002330:	2b20      	cmp	r3, #32
 8002332:	d1d6      	bne.n	80022e2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2220      	movs	r2, #32
 8002342:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fece 	bl	80020e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <I2C_IsAcknowledgeFailed+0xf0>)
 8002358:	400a      	ands	r2, r1
 800235a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	2204      	movs	r2, #4
 8002362:	431a      	orrs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2241      	movs	r2, #65	; 0x41
 800236c:	2120      	movs	r1, #32
 800236e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2242      	movs	r2, #66	; 0x42
 8002374:	2100      	movs	r1, #0
 8002376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	fe00e800 	.word	0xfe00e800

08002394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	0008      	movs	r0, r1
 800239e:	0011      	movs	r1, r2
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	240a      	movs	r4, #10
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	1c02      	adds	r2, r0, #0
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	2009      	movs	r0, #9
 80023ac:	183b      	adds	r3, r7, r0
 80023ae:	1c0a      	adds	r2, r1, #0
 80023b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	0d51      	lsrs	r1, r2, #21
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	00d2      	lsls	r2, r2, #3
 80023c0:	400a      	ands	r2, r1
 80023c2:	490e      	ldr	r1, [pc, #56]	; (80023fc <I2C_TransferConfig+0x68>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	43d2      	mvns	r2, r2
 80023c8:	401a      	ands	r2, r3
 80023ca:	0011      	movs	r1, r2
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	059b      	lsls	r3, r3, #22
 80023d2:	0d9a      	lsrs	r2, r3, #22
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	0418      	lsls	r0, r3, #16
 80023da:	23ff      	movs	r3, #255	; 0xff
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	4003      	ands	r3, r0
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b005      	add	sp, #20
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	03ff63ff 	.word	0x03ff63ff

08002400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	d138      	bne.n	8002488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	5c9b      	ldrb	r3, [r3, r2]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002420:	2302      	movs	r3, #2
 8002422:	e032      	b.n	800248a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	2101      	movs	r1, #1
 800242a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2241      	movs	r2, #65	; 0x41
 8002430:	2124      	movs	r1, #36	; 0x24
 8002432:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	438a      	bics	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4911      	ldr	r1, [pc, #68]	; (8002494 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002450:	400a      	ands	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2101      	movs	r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2241      	movs	r2, #65	; 0x41
 8002478:	2120      	movs	r1, #32
 800247a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	ffffefff 	.word	0xffffefff

08002498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2241      	movs	r2, #65	; 0x41
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d139      	bne.n	8002522 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e033      	b.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	2101      	movs	r1, #1
 80024c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2241      	movs	r2, #65	; 0x41
 80024c8:	2124      	movs	r1, #36	; 0x24
 80024ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2241      	movs	r2, #65	; 0x41
 8002512:	2120      	movs	r1, #32
 8002514:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
  }
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	fffff0ff 	.word	0xfffff0ff

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e301      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x1e>
 800254c:	e08d      	b.n	800266a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800254e:	4bc3      	ldr	r3, [pc, #780]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	220c      	movs	r2, #12
 8002554:	4013      	ands	r3, r2
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00e      	beq.n	8002578 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800255a:	4bc0      	ldr	r3, [pc, #768]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	220c      	movs	r2, #12
 8002560:	4013      	ands	r3, r2
 8002562:	2b08      	cmp	r3, #8
 8002564:	d116      	bne.n	8002594 <HAL_RCC_OscConfig+0x64>
 8002566:	4bbd      	ldr	r3, [pc, #756]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	401a      	ands	r2, r3
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	025b      	lsls	r3, r3, #9
 8002574:	429a      	cmp	r2, r3
 8002576:	d10d      	bne.n	8002594 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	4bb8      	ldr	r3, [pc, #736]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	029b      	lsls	r3, r3, #10
 8002580:	4013      	ands	r3, r2
 8002582:	d100      	bne.n	8002586 <HAL_RCC_OscConfig+0x56>
 8002584:	e070      	b.n	8002668 <HAL_RCC_OscConfig+0x138>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d000      	beq.n	8002590 <HAL_RCC_OscConfig+0x60>
 800258e:	e06b      	b.n	8002668 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e2d8      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x7c>
 800259c:	4baf      	ldr	r3, [pc, #700]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4bae      	ldr	r3, [pc, #696]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0249      	lsls	r1, r1, #9
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e02f      	b.n	800260c <HAL_RCC_OscConfig+0xdc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x9e>
 80025b4:	4ba9      	ldr	r3, [pc, #676]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4ba8      	ldr	r3, [pc, #672]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025ba:	49a9      	ldr	r1, [pc, #676]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025bc:	400a      	ands	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	4ba6      	ldr	r3, [pc, #664]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4ba5      	ldr	r3, [pc, #660]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025c6:	49a7      	ldr	r1, [pc, #668]	; (8002864 <HAL_RCC_OscConfig+0x334>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e01e      	b.n	800260c <HAL_RCC_OscConfig+0xdc>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10e      	bne.n	80025f4 <HAL_RCC_OscConfig+0xc4>
 80025d6:	4ba1      	ldr	r3, [pc, #644]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4ba0      	ldr	r3, [pc, #640]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	02c9      	lsls	r1, r1, #11
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	4b9d      	ldr	r3, [pc, #628]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b9c      	ldr	r3, [pc, #624]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xdc>
 80025f4:	4b99      	ldr	r3, [pc, #612]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b98      	ldr	r3, [pc, #608]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80025fa:	4999      	ldr	r1, [pc, #612]	; (8002860 <HAL_RCC_OscConfig+0x330>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b95      	ldr	r3, [pc, #596]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002606:	4997      	ldr	r1, [pc, #604]	; (8002864 <HAL_RCC_OscConfig+0x334>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d014      	beq.n	800263e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fdb0 	bl	8001178 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261e:	f7fe fdab 	bl	8001178 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e28a      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	4013      	ands	r3, r2
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0xee>
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fd9b 	bl	8001178 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fd96 	bl	8001178 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e275      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b80      	ldr	r3, [pc, #512]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	029b      	lsls	r3, r3, #10
 8002662:	4013      	ands	r3, r2
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x118>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x146>
 8002674:	e069      	b.n	800274a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002676:	4b79      	ldr	r3, [pc, #484]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	220c      	movs	r2, #12
 800267c:	4013      	ands	r3, r2
 800267e:	d00b      	beq.n	8002698 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002680:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	220c      	movs	r2, #12
 8002686:	4013      	ands	r3, r2
 8002688:	2b08      	cmp	r3, #8
 800268a:	d11c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x196>
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	025b      	lsls	r3, r3, #9
 8002694:	4013      	ands	r3, r2
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x17e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e24b      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b6b      	ldr	r3, [pc, #428]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	22f8      	movs	r2, #248	; 0xf8
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	00da      	lsls	r2, r3, #3
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c4:	e041      	b.n	800274a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d024      	beq.n	8002718 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	430a      	orrs	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe fd4d 	bl	8001178 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe fd48 	bl	8001178 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e227      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0f1      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22f8      	movs	r2, #248	; 0xf8
 8002706:	4393      	bics	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00da      	lsls	r2, r3, #3
 8002710:	4b52      	ldr	r3, [pc, #328]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e018      	b.n	800274a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800271e:	2101      	movs	r1, #1
 8002720:	438a      	bics	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fd28 	bl	8001178 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fd23 	bl	8001178 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e202      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d1f1      	bne.n	800272e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	4013      	ands	r3, r2
 8002752:	d036      	beq.n	80027c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 800275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002760:	4b3e      	ldr	r3, [pc, #248]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002762:	2101      	movs	r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe fd06 	bl	8001178 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002772:	f7fe fd01 	bl	8001178 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1e0      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2202      	movs	r2, #2
 800278a:	4013      	ands	r3, r2
 800278c:	d0f1      	beq.n	8002772 <HAL_RCC_OscConfig+0x242>
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002796:	2101      	movs	r1, #1
 8002798:	438a      	bics	r2, r1
 800279a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fcec 	bl	8001178 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe fce7 	bl	8001178 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1c6      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d1f1      	bne.n	80027a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d100      	bne.n	80027ce <HAL_RCC_OscConfig+0x29e>
 80027cc:	e0b4      	b.n	8002938 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	201f      	movs	r0, #31
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	4013      	ands	r3, r2
 80027e0:	d110      	bne.n	8002804 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	0549      	lsls	r1, r1, #21
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_RCC_OscConfig+0x338>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d11a      	bne.n	8002846 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x338>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_RCC_OscConfig+0x338>)
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0049      	lsls	r1, r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe fcab 	bl	8001178 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fca6 	bl	8001178 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e185      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x338>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10e      	bne.n	800286c <HAL_RCC_OscConfig+0x33c>
 800284e:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_OscConfig+0x32c>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	621a      	str	r2, [r3, #32]
 800285a:	e035      	b.n	80028c8 <HAL_RCC_OscConfig+0x398>
 800285c:	40021000 	.word	0x40021000
 8002860:	fffeffff 	.word	0xfffeffff
 8002864:	fffbffff 	.word	0xfffbffff
 8002868:	40007000 	.word	0x40007000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0x35e>
 8002874:	4bb6      	ldr	r3, [pc, #728]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	4bb5      	ldr	r3, [pc, #724]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	4bb3      	ldr	r3, [pc, #716]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	4bb2      	ldr	r3, [pc, #712]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002886:	2104      	movs	r1, #4
 8002888:	438a      	bics	r2, r1
 800288a:	621a      	str	r2, [r3, #32]
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x398>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x380>
 8002896:	4bae      	ldr	r3, [pc, #696]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	4bad      	ldr	r3, [pc, #692]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800289c:	2104      	movs	r1, #4
 800289e:	430a      	orrs	r2, r1
 80028a0:	621a      	str	r2, [r3, #32]
 80028a2:	4bab      	ldr	r3, [pc, #684]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	4baa      	ldr	r3, [pc, #680]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	621a      	str	r2, [r3, #32]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x398>
 80028b0:	4ba7      	ldr	r3, [pc, #668]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	4ba6      	ldr	r3, [pc, #664]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	4ba4      	ldr	r3, [pc, #656]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	4ba3      	ldr	r3, [pc, #652]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028c2:	2104      	movs	r1, #4
 80028c4:	438a      	bics	r2, r1
 80028c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fc52 	bl	8001178 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e009      	b.n	80028ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fc4d 	bl	8001178 <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	4a9b      	ldr	r2, [pc, #620]	; (8002b54 <HAL_RCC_OscConfig+0x624>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e12b      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b98      	ldr	r3, [pc, #608]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2202      	movs	r2, #2
 80028f4:	4013      	ands	r3, r2
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x3aa>
 80028f8:	e013      	b.n	8002922 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fc3d 	bl	8001178 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e009      	b.n	8002918 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe fc38 	bl	8001178 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	4a91      	ldr	r2, [pc, #580]	; (8002b54 <HAL_RCC_OscConfig+0x624>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e116      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	4b87      	ldr	r3, [pc, #540]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002932:	4989      	ldr	r1, [pc, #548]	; (8002b58 <HAL_RCC_OscConfig+0x628>)
 8002934:	400a      	ands	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d12a      	bne.n	80029a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800294a:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002950:	2104      	movs	r1, #4
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002956:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800295c:	2101      	movs	r1, #1
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7fe fc09 	bl	8001178 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800296c:	f7fe fc04 	bl	8001178 <HAL_GetTick>
 8002970:	0002      	movs	r2, r0
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0e3      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800297e:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d0f1      	beq.n	800296c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002988:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	22f8      	movs	r2, #248	; 0xf8
 800298e:	4393      	bics	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
 800299e:	e034      	b.n	8002a0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	3305      	adds	r3, #5
 80029a6:	d111      	bne.n	80029cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029ae:	2104      	movs	r1, #4
 80029b0:	438a      	bics	r2, r1
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	22f8      	movs	r2, #248	; 0xf8
 80029ba:	4393      	bics	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	00da      	lsls	r2, r3, #3
 80029c4:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ca:	e01e      	b.n	8002a0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029cc:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029d2:	2104      	movs	r1, #4
 80029d4:	430a      	orrs	r2, r1
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029d8:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 80029de:	2101      	movs	r1, #1
 80029e0:	438a      	bics	r2, r1
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe fbc8 	bl	8001178 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029ee:	f7fe fbc3 	bl	8001178 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0a2      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d1f1      	bne.n	80029ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4e4>
 8002a12:	e097      	b.n	8002b44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a14:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	220c      	movs	r2, #12
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d100      	bne.n	8002a22 <HAL_RCC_OscConfig+0x4f2>
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d14c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a30:	494a      	ldr	r1, [pc, #296]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fb9f 	bl	8001178 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fb9a 	bl	8001178 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e079      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	049b      	lsls	r3, r3, #18
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	220f      	movs	r2, #15
 8002a64:	4393      	bics	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_RCC_OscConfig+0x630>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	431a      	orrs	r2, r3
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	0449      	lsls	r1, r1, #17
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fb6d 	bl	8001178 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fb68 	bl	8001178 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e047      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	049b      	lsls	r3, r3, #18
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x574>
 8002ac2:	e03f      	b.n	8002b44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002aca:	4924      	ldr	r1, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x62c>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fb52 	bl	8001178 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fb4d 	bl	8001178 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e02c      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x5aa>
 8002af8:	e024      	b.n	8002b44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01f      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_RCC_OscConfig+0x620>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	025b      	lsls	r3, r3, #9
 8002b18:	401a      	ands	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10e      	bne.n	8002b40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	220f      	movs	r2, #15
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	23f0      	movs	r3, #240	; 0xf0
 8002b34:	039b      	lsls	r3, r3, #14
 8002b36:	401a      	ands	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b008      	add	sp, #32
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40021000 	.word	0x40021000
 8002b54:	00001388 	.word	0x00001388
 8002b58:	efffffff 	.word	0xefffffff
 8002b5c:	feffffff 	.word	0xfeffffff
 8002b60:	ffc2ffff 	.word	0xffc2ffff

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b3      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d911      	bls.n	8002baa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e09a      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d006      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002bc4:	21e0      	movs	r1, #224	; 0xe0
 8002bc6:	00c9      	lsls	r1, r1, #3
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	22f0      	movs	r2, #240	; 0xf0
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	d040      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d114      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06e      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	049b      	lsls	r3, r3, #18
 8002c12:	4013      	ands	r3, r2
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e062      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e05b      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4393      	bics	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa9c 	bl	8001178 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c44:	e009      	b.n	8002c5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c46:	f7fe fa97 	bl	8001178 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_RCC_ClockConfig+0x18c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e042      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	220c      	movs	r2, #12
 8002c60:	401a      	ands	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1ec      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d211      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4393      	bics	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x184>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e020      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <HAL_RCC_ClockConfig+0x190>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cbc:	f000 f820 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cc0:	0001      	movs	r1, r0
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x188>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	220f      	movs	r2, #15
 8002cca:	4013      	ands	r3, r2
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x194>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	000a      	movs	r2, r1
 8002cd2:	40da      	lsrs	r2, r3
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x198>)
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fe fa07 	bl	80010ec <HAL_InitTick>
  
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	00001388 	.word	0x00001388
 8002cf4:	fffff8ff 	.word	0xfffff8ff
 8002cf8:	080048e8 	.word	0x080048e8
 8002cfc:	20000000 	.word	0x20000000

08002d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08f      	sub	sp, #60	; 0x3c
 8002d04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d06:	2314      	movs	r3, #20
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d1a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d24:	2300      	movs	r3, #0
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d28:	2300      	movs	r3, #0
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	220c      	movs	r2, #12
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d002      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x4a>
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d003      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x50>
 8002d48:	e02d      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d4e:	e02d      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	220f      	movs	r2, #15
 8002d56:	4013      	ands	r3, r2
 8002d58:	2214      	movs	r2, #20
 8002d5a:	18ba      	adds	r2, r7, r2
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	220f      	movs	r2, #15
 8002d66:	4013      	ands	r3, r2
 8002d68:	1d3a      	adds	r2, r7, #4
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	4013      	ands	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7a:	4812      	ldr	r0, [pc, #72]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d7c:	f7fd f9ce 	bl	800011c <__udivsi3>
 8002d80:	0003      	movs	r3, r0
 8002d82:	001a      	movs	r2, r3
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	4353      	muls	r3, r2
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	e009      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d8e:	000a      	movs	r2, r1
 8002d90:	0152      	lsls	r2, r2, #5
 8002d92:	1a52      	subs	r2, r2, r1
 8002d94:	0193      	lsls	r3, r2, #6
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	185b      	adds	r3, r3, r1
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002daa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b00f      	add	sp, #60	; 0x3c
 8002db4:	bd90      	pop	{r4, r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	08004894 	.word	0x08004894
 8002dbc:	080048a4 	.word	0x080048a4
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	20000000 	.word	0x20000000

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002de0:	f7ff fff2 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de4:	0001      	movs	r1, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	2207      	movs	r2, #7
 8002dee:	4013      	ands	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	40d9      	lsrs	r1, r3
 8002df6:	000b      	movs	r3, r1
}    
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080048f8 	.word	0x080048f8

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	4013      	ands	r3, r2
 8002e22:	d100      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e24:	e08e      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2017      	movs	r0, #23
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	055b      	lsls	r3, r3, #21
 8002e36:	4013      	ands	r3, r2
 8002e38:	d110      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0549      	lsls	r1, r1, #21
 8002e44:	430a      	orrs	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	183b      	adds	r3, r7, r0
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d11a      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e68:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	0049      	lsls	r1, r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f97f 	bl	8001178 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	e008      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe f97a 	bl	8001178 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e087      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	23c0      	movs	r3, #192	; 0xc0
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d034      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	23c0      	movs	r3, #192	; 0xc0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d02c      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0249      	lsls	r1, r1, #9
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ede:	4936      	ldr	r1, [pc, #216]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f941 	bl	8001178 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe f93c 	bl	8001178 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e048      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2e:	2317      	movs	r3, #23
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f3e:	4920      	ldr	r1, [pc, #128]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	2203      	movs	r2, #3
 8002f54:	4393      	bics	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2210      	movs	r2, #16
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	2240      	movs	r2, #64	; 0x40
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b006      	add	sp, #24
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	fffffcff 	.word	0xfffffcff
 8002fb8:	fffeffff 	.word	0xfffeffff
 8002fbc:	00001388 	.word	0x00001388
 8002fc0:	efffffff 	.word	0xefffffff

08002fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e044      	b.n	8003060 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2274      	movs	r2, #116	; 0x74
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd ff57 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2224      	movs	r2, #36	; 0x24
 8002ff2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	438a      	bics	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 fbce 	bl	80037a8 <UART_SetConfig>
 800300c:	0003      	movs	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e024      	b.n	8003060 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 fd01 	bl	8003a28 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	490d      	ldr	r1, [pc, #52]	; (8003068 <HAL_UART_Init+0xa4>)
 8003032:	400a      	ands	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	212a      	movs	r1, #42	; 0x2a
 8003042:	438a      	bics	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fd99 	bl	8003b90 <UART_CheckIdleState>
 800305e:	0003      	movs	r3, r0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}
 8003068:	ffffb7ff 	.word	0xffffb7ff

0800306c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	1dbb      	adds	r3, r7, #6
 800307a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003080:	2b20      	cmp	r3, #32
 8003082:	d000      	beq.n	8003086 <HAL_UART_Transmit+0x1a>
 8003084:	e096      	b.n	80031b4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_UART_Transmit+0x28>
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e08e      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	015b      	lsls	r3, r3, #5
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d109      	bne.n	80030b8 <HAL_UART_Transmit+0x4c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e07e      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2274      	movs	r2, #116	; 0x74
 80030bc:	5c9b      	ldrb	r3, [r3, r2]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Transmit+0x5a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e077      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2274      	movs	r2, #116	; 0x74
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	2100      	movs	r1, #0
 80030d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2221      	movs	r2, #33	; 0x21
 80030da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030dc:	f7fe f84c 	bl	8001178 <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1dba      	adds	r2, r7, #6
 80030e8:	2150      	movs	r1, #80	; 0x50
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1dba      	adds	r2, r7, #6
 80030f2:	2152      	movs	r1, #82	; 0x52
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	429a      	cmp	r2, r3
 8003102:	d108      	bne.n	8003116 <HAL_UART_Transmit+0xaa>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e003      	b.n	800311e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2274      	movs	r2, #116	; 0x74
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003126:	e02d      	b.n	8003184 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	0013      	movs	r3, r2
 8003132:	2200      	movs	r2, #0
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	f000 fd73 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e039      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	05d2      	lsls	r2, r2, #23
 8003152:	0dd2      	lsrs	r2, r2, #23
 8003154:	b292      	uxth	r2, r2
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3302      	adds	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e008      	b.n	8003172 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b292      	uxth	r2, r2
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2252      	movs	r2, #82	; 0x52
 8003176:	5a9b      	ldrh	r3, [r3, r2]
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b299      	uxth	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2252      	movs	r2, #82	; 0x52
 8003182:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2252      	movs	r2, #82	; 0x52
 8003188:	5a9b      	ldrh	r3, [r3, r2]
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1cb      	bne.n	8003128 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	0013      	movs	r3, r2
 800319a:	2200      	movs	r2, #0
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	f000 fd3f 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d001      	beq.n	80031aa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e005      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b008      	add	sp, #32
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b0ab      	sub	sp, #172	; 0xac
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	22a4      	movs	r2, #164	; 0xa4
 80031d0:	18b9      	adds	r1, r7, r2
 80031d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	20a0      	movs	r0, #160	; 0xa0
 80031dc:	1839      	adds	r1, r7, r0
 80031de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	219c      	movs	r1, #156	; 0x9c
 80031e8:	1879      	adds	r1, r7, r1
 80031ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ec:	0011      	movs	r1, r2
 80031ee:	18bb      	adds	r3, r7, r2
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a99      	ldr	r2, [pc, #612]	; (8003458 <HAL_UART_IRQHandler+0x298>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	2298      	movs	r2, #152	; 0x98
 80031f8:	18bc      	adds	r4, r7, r2
 80031fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80031fc:	18bb      	adds	r3, r7, r2
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d114      	bne.n	800322e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003204:	187b      	adds	r3, r7, r1
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2220      	movs	r2, #32
 800320a:	4013      	ands	r3, r2
 800320c:	d00f      	beq.n	800322e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320e:	183b      	adds	r3, r7, r0
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d00a      	beq.n	800322e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	2b00      	cmp	r3, #0
 800321e:	d100      	bne.n	8003222 <HAL_UART_IRQHandler+0x62>
 8003220:	e296      	b.n	8003750 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	0010      	movs	r0, r2
 800322a:	4798      	blx	r3
      }
      return;
 800322c:	e290      	b.n	8003750 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800322e:	2398      	movs	r3, #152	; 0x98
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d100      	bne.n	800323a <HAL_UART_IRQHandler+0x7a>
 8003238:	e114      	b.n	8003464 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800323a:	239c      	movs	r3, #156	; 0x9c
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	d106      	bne.n	8003254 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003246:	23a0      	movs	r3, #160	; 0xa0
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a83      	ldr	r2, [pc, #524]	; (800345c <HAL_UART_IRQHandler+0x29c>)
 800324e:	4013      	ands	r3, r2
 8003250:	d100      	bne.n	8003254 <HAL_UART_IRQHandler+0x94>
 8003252:	e107      	b.n	8003464 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003254:	23a4      	movs	r3, #164	; 0xa4
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d012      	beq.n	8003286 <HAL_UART_IRQHandler+0xc6>
 8003260:	23a0      	movs	r3, #160	; 0xa0
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	2201      	movs	r2, #1
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003286:	23a4      	movs	r3, #164	; 0xa4
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d011      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
 8003292:	239c      	movs	r3, #156	; 0x9c
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	589b      	ldr	r3, [r3, r2]
 80032ac:	2204      	movs	r2, #4
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b6:	23a4      	movs	r3, #164	; 0xa4
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2204      	movs	r2, #4
 80032be:	4013      	ands	r3, r2
 80032c0:	d011      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
 80032c2:	239c      	movs	r3, #156	; 0x9c
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	2202      	movs	r2, #2
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032e6:	23a4      	movs	r3, #164	; 0xa4
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4013      	ands	r3, r2
 80032f0:	d017      	beq.n	8003322 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032f2:	23a0      	movs	r3, #160	; 0xa0
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4013      	ands	r3, r2
 80032fc:	d105      	bne.n	800330a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032fe:	239c      	movs	r3, #156	; 0x9c
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2201      	movs	r2, #1
 8003306:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003308:	d00b      	beq.n	8003322 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2208      	movs	r2, #8
 8003310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	2208      	movs	r2, #8
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003322:	23a4      	movs	r3, #164	; 0xa4
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	4013      	ands	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_UART_IRQHandler+0x198>
 8003330:	23a0      	movs	r3, #160	; 0xa0
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	04db      	lsls	r3, r3, #19
 800333a:	4013      	ands	r3, r2
 800333c:	d00c      	beq.n	8003358 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	589b      	ldr	r3, [r3, r2]
 800334e:	2220      	movs	r2, #32
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	589b      	ldr	r3, [r3, r2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d100      	bne.n	8003364 <HAL_UART_IRQHandler+0x1a4>
 8003362:	e1f7      	b.n	8003754 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003364:	23a4      	movs	r3, #164	; 0xa4
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	4013      	ands	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003370:	23a0      	movs	r3, #160	; 0xa0
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2220      	movs	r2, #32
 8003378:	4013      	ands	r3, r2
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	0010      	movs	r0, r2
 800338c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	589b      	ldr	r3, [r3, r2]
 8003394:	2194      	movs	r1, #148	; 0x94
 8003396:	187a      	adds	r2, r7, r1
 8003398:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2240      	movs	r2, #64	; 0x40
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d004      	beq.n	80033b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2228      	movs	r2, #40	; 0x28
 80033ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033b0:	d047      	beq.n	8003442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 fcf7 	bl	8003da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d137      	bne.n	8003438 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c8:	f3ef 8310 	mrs	r3, PRIMASK
 80033cc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d0:	2090      	movs	r0, #144	; 0x90
 80033d2:	183a      	adds	r2, r7, r0
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	438a      	bics	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	183b      	adds	r3, r7, r0
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UART_IRQHandler+0x2a0>)
 800340e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	0018      	movs	r0, r3
 8003416:	f7fe f817 	bl	8001448 <HAL_DMA_Abort_IT>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d01a      	beq.n	8003454 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	0018      	movs	r0, r3
 800342a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e012      	b.n	8003454 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f9a5 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003436:	e00d      	b.n	8003454 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f9a0 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e008      	b.n	8003454 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f99b 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	2100      	movs	r1, #0
 8003450:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003452:	e17f      	b.n	8003754 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	46c0      	nop			; (mov r8, r8)
    return;
 8003456:	e17d      	b.n	8003754 <HAL_UART_IRQHandler+0x594>
 8003458:	0000080f 	.word	0x0000080f
 800345c:	04000120 	.word	0x04000120
 8003460:	08003e6d 	.word	0x08003e6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	2b01      	cmp	r3, #1
 800346a:	d000      	beq.n	800346e <HAL_UART_IRQHandler+0x2ae>
 800346c:	e131      	b.n	80036d2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800346e:	23a4      	movs	r3, #164	; 0xa4
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	4013      	ands	r3, r2
 8003478:	d100      	bne.n	800347c <HAL_UART_IRQHandler+0x2bc>
 800347a:	e12a      	b.n	80036d2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800347c:	23a0      	movs	r3, #160	; 0xa0
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2210      	movs	r2, #16
 8003484:	4013      	ands	r3, r2
 8003486:	d100      	bne.n	800348a <HAL_UART_IRQHandler+0x2ca>
 8003488:	e123      	b.n	80036d2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2210      	movs	r2, #16
 8003490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2240      	movs	r2, #64	; 0x40
 800349a:	4013      	ands	r3, r2
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d000      	beq.n	80034a2 <HAL_UART_IRQHandler+0x2e2>
 80034a0:	e09b      	b.n	80035da <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	217e      	movs	r1, #126	; 0x7e
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d100      	bne.n	80034ba <HAL_UART_IRQHandler+0x2fa>
 80034b8:	e14e      	b.n	8003758 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2258      	movs	r2, #88	; 0x58
 80034be:	5a9b      	ldrh	r3, [r3, r2]
 80034c0:	187a      	adds	r2, r7, r1
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d300      	bcc.n	80034ca <HAL_UART_IRQHandler+0x30a>
 80034c8:	e146      	b.n	8003758 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	187a      	adds	r2, r7, r1
 80034ce:	215a      	movs	r1, #90	; 0x5a
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d06e      	beq.n	80035bc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034de:	f3ef 8310 	mrs	r3, PRIMASK
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e8:	2301      	movs	r3, #1
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	499a      	ldr	r1, [pc, #616]	; (8003768 <HAL_UART_IRQHandler+0x5a8>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003510:	f3ef 8310 	mrs	r3, PRIMASK
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
 800351a:	2301      	movs	r3, #1
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	438a      	bics	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003538:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	673b      	str	r3, [r7, #112]	; 0x70
 800354c:	2301      	movs	r3, #1
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2140      	movs	r1, #64	; 0x40
 8003564:	438a      	bics	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003580:	f3ef 8310 	mrs	r3, PRIMASK
 8003584:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003586:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800358a:	2301      	movs	r3, #1
 800358c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2110      	movs	r1, #16
 80035a2:	438a      	bics	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fd ff0e 	bl	80013d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2258      	movs	r2, #88	; 0x58
 80035c0:	5a9a      	ldrh	r2, [r3, r2]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	215a      	movs	r1, #90	; 0x5a
 80035c6:	5a5b      	ldrh	r3, [r3, r1]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0011      	movs	r1, r2
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f8dc 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035d8:	e0be      	b.n	8003758 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2258      	movs	r2, #88	; 0x58
 80035de:	5a99      	ldrh	r1, [r3, r2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	225a      	movs	r2, #90	; 0x5a
 80035e4:	5a9b      	ldrh	r3, [r3, r2]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	208e      	movs	r0, #142	; 0x8e
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	1a8a      	subs	r2, r1, r2
 80035ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	225a      	movs	r2, #90	; 0x5a
 80035f4:	5a9b      	ldrh	r3, [r3, r2]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d100      	bne.n	80035fe <HAL_UART_IRQHandler+0x43e>
 80035fc:	e0ae      	b.n	800375c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80035fe:	183b      	adds	r3, r7, r0
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d100      	bne.n	8003608 <HAL_UART_IRQHandler+0x448>
 8003606:	e0a9      	b.n	800375c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003608:	f3ef 8310 	mrs	r3, PRIMASK
 800360c:	60fb      	str	r3, [r7, #12]
  return(result);
 800360e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003610:	2488      	movs	r4, #136	; 0x88
 8003612:	193a      	adds	r2, r7, r4
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	2301      	movs	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	494f      	ldr	r1, [pc, #316]	; (800376c <HAL_UART_IRQHandler+0x5ac>)
 800362e:	400a      	ands	r2, r1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	193b      	adds	r3, r7, r4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f383 8810 	msr	PRIMASK, r3
}
 800363e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003640:	f3ef 8310 	mrs	r3, PRIMASK
 8003644:	61bb      	str	r3, [r7, #24]
  return(result);
 8003646:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	2484      	movs	r4, #132	; 0x84
 800364a:	193a      	adds	r2, r7, r4
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	193b      	adds	r3, r7, r4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368a:	f3ef 8310 	mrs	r3, PRIMASK
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	2480      	movs	r4, #128	; 0x80
 8003694:	193a      	adds	r2, r7, r4
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2110      	movs	r1, #16
 80036b0:	438a      	bics	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f860 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d0:	e044      	b.n	800375c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036d2:	23a4      	movs	r3, #164	; 0xa4
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	035b      	lsls	r3, r3, #13
 80036dc:	4013      	ands	r3, r2
 80036de:	d010      	beq.n	8003702 <HAL_UART_IRQHandler+0x542>
 80036e0:	239c      	movs	r3, #156	; 0x9c
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	03db      	lsls	r3, r3, #15
 80036ea:	4013      	ands	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0352      	lsls	r2, r2, #13
 80036f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fbf8 	bl	8003ef0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003700:	e02f      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003702:	23a4      	movs	r3, #164	; 0xa4
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	4013      	ands	r3, r2
 800370c:	d00f      	beq.n	800372e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800370e:	23a0      	movs	r3, #160	; 0xa0
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	4013      	ands	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01e      	beq.n	8003760 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	0010      	movs	r0, r2
 800372a:	4798      	blx	r3
    }
    return;
 800372c:	e018      	b.n	8003760 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372e:	23a4      	movs	r3, #164	; 0xa4
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	4013      	ands	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_UART_IRQHandler+0x5a2>
 800373a:	23a0      	movs	r3, #160	; 0xa0
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	4013      	ands	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 fba6 	bl	8003e9a <UART_EndTransmit_IT>
    return;
 800374e:	e008      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	e006      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	e004      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	e002      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
      return;
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	e000      	b.n	8003762 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003760:	46c0      	nop			; (mov r8, r8)
  }

}
 8003762:	46bd      	mov	sp, r7
 8003764:	b02b      	add	sp, #172	; 0xac
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	fffffeff 	.word	0xfffffeff
 800376c:	fffffedf 	.word	0xfffffedf

08003770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	000a      	movs	r2, r1
 800379a:	1cbb      	adds	r3, r7, #2
 800379c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b0:	231e      	movs	r3, #30
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a8d      	ldr	r2, [pc, #564]	; (8003a0c <UART_SetConfig+0x264>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a88      	ldr	r2, [pc, #544]	; (8003a10 <UART_SetConfig+0x268>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a7f      	ldr	r2, [pc, #508]	; (8003a14 <UART_SetConfig+0x26c>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7b      	ldr	r2, [pc, #492]	; (8003a18 <UART_SetConfig+0x270>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d127      	bne.n	800387e <UART_SetConfig+0xd6>
 800382e:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <UART_SetConfig+0x274>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	2203      	movs	r2, #3
 8003834:	4013      	ands	r3, r2
 8003836:	2b03      	cmp	r3, #3
 8003838:	d00d      	beq.n	8003856 <UART_SetConfig+0xae>
 800383a:	d81b      	bhi.n	8003874 <UART_SetConfig+0xcc>
 800383c:	2b02      	cmp	r3, #2
 800383e:	d014      	beq.n	800386a <UART_SetConfig+0xc2>
 8003840:	d818      	bhi.n	8003874 <UART_SetConfig+0xcc>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <UART_SetConfig+0xa4>
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00a      	beq.n	8003860 <UART_SetConfig+0xb8>
 800384a:	e013      	b.n	8003874 <UART_SetConfig+0xcc>
 800384c:	231f      	movs	r3, #31
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e021      	b.n	800389a <UART_SetConfig+0xf2>
 8003856:	231f      	movs	r3, #31
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e01c      	b.n	800389a <UART_SetConfig+0xf2>
 8003860:	231f      	movs	r3, #31
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2204      	movs	r2, #4
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e017      	b.n	800389a <UART_SetConfig+0xf2>
 800386a:	231f      	movs	r3, #31
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2208      	movs	r2, #8
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e012      	b.n	800389a <UART_SetConfig+0xf2>
 8003874:	231f      	movs	r3, #31
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2210      	movs	r2, #16
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e00d      	b.n	800389a <UART_SetConfig+0xf2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <UART_SetConfig+0x278>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d104      	bne.n	8003892 <UART_SetConfig+0xea>
 8003888:	231f      	movs	r3, #31
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e003      	b.n	800389a <UART_SetConfig+0xf2>
 8003892:	231f      	movs	r3, #31
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2210      	movs	r2, #16
 8003898:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d15d      	bne.n	8003962 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80038a6:	231f      	movs	r3, #31
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d015      	beq.n	80038dc <UART_SetConfig+0x134>
 80038b0:	dc18      	bgt.n	80038e4 <UART_SetConfig+0x13c>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d00d      	beq.n	80038d2 <UART_SetConfig+0x12a>
 80038b6:	dc15      	bgt.n	80038e4 <UART_SetConfig+0x13c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <UART_SetConfig+0x11a>
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d005      	beq.n	80038cc <UART_SetConfig+0x124>
 80038c0:	e010      	b.n	80038e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c2:	f7ff fa8b 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 80038c6:	0003      	movs	r3, r0
 80038c8:	61bb      	str	r3, [r7, #24]
        break;
 80038ca:	e012      	b.n	80038f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <UART_SetConfig+0x27c>)
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e00f      	b.n	80038f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7ff fa15 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 80038d6:	0003      	movs	r3, r0
 80038d8:	61bb      	str	r3, [r7, #24]
        break;
 80038da:	e00a      	b.n	80038f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	61bb      	str	r3, [r7, #24]
        break;
 80038e2:	e006      	b.n	80038f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e8:	231e      	movs	r3, #30
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
        break;
 80038f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d100      	bne.n	80038fa <UART_SetConfig+0x152>
 80038f8:	e07b      	b.n	80039f2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	005a      	lsls	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	18d2      	adds	r2, r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0019      	movs	r1, r3
 800390c:	0010      	movs	r0, r2
 800390e:	f7fc fc05 	bl	800011c <__udivsi3>
 8003912:	0003      	movs	r3, r0
 8003914:	b29b      	uxth	r3, r3
 8003916:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d91c      	bls.n	8003958 <UART_SetConfig+0x1b0>
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	025b      	lsls	r3, r3, #9
 8003924:	429a      	cmp	r2, r3
 8003926:	d217      	bcs.n	8003958 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	b29a      	uxth	r2, r3
 800392c:	200e      	movs	r0, #14
 800392e:	183b      	adds	r3, r7, r0
 8003930:	210f      	movs	r1, #15
 8003932:	438a      	bics	r2, r1
 8003934:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	2207      	movs	r2, #7
 800393e:	4013      	ands	r3, r2
 8003940:	b299      	uxth	r1, r3
 8003942:	183b      	adds	r3, r7, r0
 8003944:	183a      	adds	r2, r7, r0
 8003946:	8812      	ldrh	r2, [r2, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	183a      	adds	r2, r7, r0
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e04c      	b.n	80039f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	231e      	movs	r3, #30
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e047      	b.n	80039f2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003962:	231f      	movs	r3, #31
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d015      	beq.n	8003998 <UART_SetConfig+0x1f0>
 800396c:	dc18      	bgt.n	80039a0 <UART_SetConfig+0x1f8>
 800396e:	2b04      	cmp	r3, #4
 8003970:	d00d      	beq.n	800398e <UART_SetConfig+0x1e6>
 8003972:	dc15      	bgt.n	80039a0 <UART_SetConfig+0x1f8>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <UART_SetConfig+0x1d6>
 8003978:	2b02      	cmp	r3, #2
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0x1e0>
 800397c:	e010      	b.n	80039a0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7ff fa2d 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8003982:	0003      	movs	r3, r0
 8003984:	61bb      	str	r3, [r7, #24]
        break;
 8003986:	e012      	b.n	80039ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <UART_SetConfig+0x27c>)
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e00f      	b.n	80039ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7ff f9b7 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
        break;
 8003996:	e00a      	b.n	80039ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	61bb      	str	r3, [r7, #24]
        break;
 800399e:	e006      	b.n	80039ae <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039a4:	231e      	movs	r3, #30
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
        break;
 80039ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01e      	beq.n	80039f2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085a      	lsrs	r2, r3, #1
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	18d2      	adds	r2, r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0019      	movs	r1, r3
 80039c4:	0010      	movs	r0, r2
 80039c6:	f7fc fba9 	bl	800011c <__udivsi3>
 80039ca:	0003      	movs	r3, r0
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d909      	bls.n	80039ea <UART_SetConfig+0x242>
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	429a      	cmp	r2, r3
 80039de:	d204      	bcs.n	80039ea <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e003      	b.n	80039f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80039ea:	231e      	movs	r3, #30
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039fe:	231e      	movs	r3, #30
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b008      	add	sp, #32
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	ffff69f3 	.word	0xffff69f3
 8003a10:	ffffcfff 	.word	0xffffcfff
 8003a14:	fffff4ff 	.word	0xfffff4ff
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40004400 	.word	0x40004400
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2201      	movs	r2, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4a4a      	ldr	r2, [pc, #296]	; (8003b6c <UART_AdvFeatureConfig+0x144>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2202      	movs	r2, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a43      	ldr	r2, [pc, #268]	; (8003b70 <UART_AdvFeatureConfig+0x148>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2204      	movs	r2, #4
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <UART_AdvFeatureConfig+0x14c>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a34      	ldr	r2, [pc, #208]	; (8003b78 <UART_AdvFeatureConfig+0x150>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2210      	movs	r2, #16
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <UART_AdvFeatureConfig+0x154>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2220      	movs	r2, #32
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <UART_AdvFeatureConfig+0x158>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	4013      	ands	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <UART_AdvFeatureConfig+0x15c>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	035b      	lsls	r3, r3, #13
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d10b      	bne.n	8003b42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <UART_AdvFeatureConfig+0x160>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <UART_AdvFeatureConfig+0x164>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	fffdffff 	.word	0xfffdffff
 8003b70:	fffeffff 	.word	0xfffeffff
 8003b74:	fffbffff 	.word	0xfffbffff
 8003b78:	ffff7fff 	.word	0xffff7fff
 8003b7c:	ffffefff 	.word	0xffffefff
 8003b80:	ffffdfff 	.word	0xffffdfff
 8003b84:	ffefffff 	.word	0xffefffff
 8003b88:	ff9fffff 	.word	0xff9fffff
 8003b8c:	fff7ffff 	.word	0xfff7ffff

08003b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba0:	f7fd faea 	bl	8001178 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d10c      	bne.n	8003bd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2280      	movs	r2, #128	; 0x80
 8003bba:	0391      	lsls	r1, r2, #14
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <UART_CheckIdleState+0x8c>)
 8003bc0:	9200      	str	r2, [sp, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f000 f82c 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d001      	beq.n	8003bd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e021      	b.n	8003c14 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d10c      	bne.n	8003bf8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2280      	movs	r2, #128	; 0x80
 8003be2:	03d1      	lsls	r1, r2, #15
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <UART_CheckIdleState+0x8c>)
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f000 f818 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d001      	beq.n	8003bf8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e00d      	b.n	8003c14 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2274      	movs	r2, #116	; 0x74
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b004      	add	sp, #16
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	01ffffff 	.word	0x01ffffff

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b094      	sub	sp, #80	; 0x50
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e0a3      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c34:	3301      	adds	r3, #1
 8003c36:	d100      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c38:	e09f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fd fa9d 	bl	8001178 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d13d      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c50:	f3ef 8310 	mrs	r3, PRIMASK
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	494c      	ldr	r1, [pc, #304]	; (8003da4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2274      	movs	r2, #116	; 0x74
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e067      	b.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d050      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d146      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8003cfc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f383 8810 	msr	PRIMASK, r3
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4923      	ldr	r1, [pc, #140]	; (8003da4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d28:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d2e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	2301      	movs	r3, #1
 8003d34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f383 8810 	msr	PRIMASK, r3
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	438a      	bics	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2274      	movs	r2, #116	; 0x74
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e010      	b.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	425a      	negs	r2, r3
 8003d8a:	4153      	adcs	r3, r2
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	001a      	movs	r2, r3
 8003d90:	1dfb      	adds	r3, r7, #7
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d100      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d98:	e74b      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b014      	add	sp, #80	; 0x50
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	fffffe5f 	.word	0xfffffe5f

08003da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	617b      	str	r3, [r7, #20]
  return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4925      	ldr	r1, [pc, #148]	; (8003e68 <UART_EndRxTransfer+0xc0>)
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	623b      	str	r3, [r7, #32]
  return(result);
 8003de8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
 8003dec:	2301      	movs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d118      	bne.n	8003e4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e26:	2301      	movs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	438a      	bics	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b00e      	add	sp, #56	; 0x38
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	fffffedf 	.word	0xfffffedf

08003e6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	225a      	movs	r2, #90	; 0x5a
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2252      	movs	r2, #82	; 0x52
 8003e86:	2100      	movs	r1, #0
 8003e88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fc77 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	2301      	movs	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fc44 	bl	8003770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b006      	add	sp, #24
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b002      	add	sp, #8
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	2600      	movs	r6, #0
 8003f10:	4d0c      	ldr	r5, [pc, #48]	; (8003f44 <__libc_init_array+0x38>)
 8003f12:	4c0d      	ldr	r4, [pc, #52]	; (8003f48 <__libc_init_array+0x3c>)
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	f000 fc8b 	bl	8004838 <_init>
 8003f22:	4d0a      	ldr	r5, [pc, #40]	; (8003f4c <__libc_init_array+0x40>)
 8003f24:	4c0a      	ldr	r4, [pc, #40]	; (8003f50 <__libc_init_array+0x44>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	00b3      	lsls	r3, r6, #2
 8003f32:	58eb      	ldr	r3, [r5, r3]
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	00b3      	lsls	r3, r6, #2
 8003f3c:	58eb      	ldr	r3, [r5, r3]
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	08004934 	.word	0x08004934
 8003f48:	08004934 	.word	0x08004934
 8003f4c:	08004934 	.word	0x08004934
 8003f50:	08004938 	.word	0x08004938

08003f54 <memset>:
 8003f54:	0003      	movs	r3, r0
 8003f56:	1882      	adds	r2, r0, r2
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	7019      	strb	r1, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <siprintf>:
 8003f64:	b40e      	push	{r1, r2, r3}
 8003f66:	b500      	push	{lr}
 8003f68:	490b      	ldr	r1, [pc, #44]	; (8003f98 <siprintf+0x34>)
 8003f6a:	b09c      	sub	sp, #112	; 0x70
 8003f6c:	ab1d      	add	r3, sp, #116	; 0x74
 8003f6e:	9002      	str	r0, [sp, #8]
 8003f70:	9006      	str	r0, [sp, #24]
 8003f72:	9107      	str	r1, [sp, #28]
 8003f74:	9104      	str	r1, [sp, #16]
 8003f76:	4809      	ldr	r0, [pc, #36]	; (8003f9c <siprintf+0x38>)
 8003f78:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <siprintf+0x3c>)
 8003f7a:	cb04      	ldmia	r3!, {r2}
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	6800      	ldr	r0, [r0, #0]
 8003f80:	a902      	add	r1, sp, #8
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	f000 f870 	bl	8004068 <_svfiprintf_r>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9a02      	ldr	r2, [sp, #8]
 8003f8c:	7013      	strb	r3, [r2, #0]
 8003f8e:	b01c      	add	sp, #112	; 0x70
 8003f90:	bc08      	pop	{r3}
 8003f92:	b003      	add	sp, #12
 8003f94:	4718      	bx	r3
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	7fffffff 	.word	0x7fffffff
 8003f9c:	2000000c 	.word	0x2000000c
 8003fa0:	ffff0208 	.word	0xffff0208

08003fa4 <__ssputs_r>:
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	688e      	ldr	r6, [r1, #8]
 8003fa8:	b085      	sub	sp, #20
 8003faa:	0007      	movs	r7, r0
 8003fac:	000c      	movs	r4, r1
 8003fae:	9203      	str	r2, [sp, #12]
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	429e      	cmp	r6, r3
 8003fb4:	d83c      	bhi.n	8004030 <__ssputs_r+0x8c>
 8003fb6:	2390      	movs	r3, #144	; 0x90
 8003fb8:	898a      	ldrh	r2, [r1, #12]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	421a      	tst	r2, r3
 8003fbe:	d034      	beq.n	800402a <__ssputs_r+0x86>
 8003fc0:	6909      	ldr	r1, [r1, #16]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	6960      	ldr	r0, [r4, #20]
 8003fc6:	1a5b      	subs	r3, r3, r1
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	2303      	movs	r3, #3
 8003fcc:	4343      	muls	r3, r0
 8003fce:	0fdd      	lsrs	r5, r3, #31
 8003fd0:	18ed      	adds	r5, r5, r3
 8003fd2:	9b01      	ldr	r3, [sp, #4]
 8003fd4:	9802      	ldr	r0, [sp, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	181b      	adds	r3, r3, r0
 8003fda:	106d      	asrs	r5, r5, #1
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	d900      	bls.n	8003fe2 <__ssputs_r+0x3e>
 8003fe0:	001d      	movs	r5, r3
 8003fe2:	0553      	lsls	r3, r2, #21
 8003fe4:	d532      	bpl.n	800404c <__ssputs_r+0xa8>
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	0038      	movs	r0, r7
 8003fea:	f000 fb53 	bl	8004694 <_malloc_r>
 8003fee:	1e06      	subs	r6, r0, #0
 8003ff0:	d109      	bne.n	8004006 <__ssputs_r+0x62>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	2340      	movs	r3, #64	; 0x40
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	89a2      	ldrh	r2, [r4, #12]
 8003ffc:	4240      	negs	r0, r0
 8003ffe:	4313      	orrs	r3, r2
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	b005      	add	sp, #20
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004006:	9a02      	ldr	r2, [sp, #8]
 8004008:	6921      	ldr	r1, [r4, #16]
 800400a:	f000 faba 	bl	8004582 <memcpy>
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <__ssputs_r+0xc0>)
 8004012:	401a      	ands	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	4313      	orrs	r3, r2
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	9b02      	ldr	r3, [sp, #8]
 800401c:	6126      	str	r6, [r4, #16]
 800401e:	18f6      	adds	r6, r6, r3
 8004020:	6026      	str	r6, [r4, #0]
 8004022:	6165      	str	r5, [r4, #20]
 8004024:	9e01      	ldr	r6, [sp, #4]
 8004026:	1aed      	subs	r5, r5, r3
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	429e      	cmp	r6, r3
 800402e:	d900      	bls.n	8004032 <__ssputs_r+0x8e>
 8004030:	9e01      	ldr	r6, [sp, #4]
 8004032:	0032      	movs	r2, r6
 8004034:	9903      	ldr	r1, [sp, #12]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	f000 faac 	bl	8004594 <memmove>
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	2000      	movs	r0, #0
 8004040:	1b9b      	subs	r3, r3, r6
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	199e      	adds	r6, r3, r6
 8004048:	6026      	str	r6, [r4, #0]
 800404a:	e7da      	b.n	8004002 <__ssputs_r+0x5e>
 800404c:	002a      	movs	r2, r5
 800404e:	0038      	movs	r0, r7
 8004050:	f000 fb96 	bl	8004780 <_realloc_r>
 8004054:	1e06      	subs	r6, r0, #0
 8004056:	d1e0      	bne.n	800401a <__ssputs_r+0x76>
 8004058:	0038      	movs	r0, r7
 800405a:	6921      	ldr	r1, [r4, #16]
 800405c:	f000 faae 	bl	80045bc <_free_r>
 8004060:	e7c7      	b.n	8003ff2 <__ssputs_r+0x4e>
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	fffffb7f 	.word	0xfffffb7f

08004068 <_svfiprintf_r>:
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b0a1      	sub	sp, #132	; 0x84
 800406c:	9003      	str	r0, [sp, #12]
 800406e:	001d      	movs	r5, r3
 8004070:	898b      	ldrh	r3, [r1, #12]
 8004072:	000f      	movs	r7, r1
 8004074:	0016      	movs	r6, r2
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	d511      	bpl.n	800409e <_svfiprintf_r+0x36>
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <_svfiprintf_r+0x36>
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	f000 fb07 	bl	8004694 <_malloc_r>
 8004086:	6038      	str	r0, [r7, #0]
 8004088:	6138      	str	r0, [r7, #16]
 800408a:	2800      	cmp	r0, #0
 800408c:	d105      	bne.n	800409a <_svfiprintf_r+0x32>
 800408e:	230c      	movs	r3, #12
 8004090:	9a03      	ldr	r2, [sp, #12]
 8004092:	3801      	subs	r0, #1
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	b021      	add	sp, #132	; 0x84
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	ac08      	add	r4, sp, #32
 80040a2:	6163      	str	r3, [r4, #20]
 80040a4:	3320      	adds	r3, #32
 80040a6:	7663      	strb	r3, [r4, #25]
 80040a8:	3310      	adds	r3, #16
 80040aa:	76a3      	strb	r3, [r4, #26]
 80040ac:	9507      	str	r5, [sp, #28]
 80040ae:	0035      	movs	r5, r6
 80040b0:	782b      	ldrb	r3, [r5, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <_svfiprintf_r+0x52>
 80040b6:	2b25      	cmp	r3, #37	; 0x25
 80040b8:	d147      	bne.n	800414a <_svfiprintf_r+0xe2>
 80040ba:	1bab      	subs	r3, r5, r6
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d00c      	beq.n	80040dc <_svfiprintf_r+0x74>
 80040c2:	0032      	movs	r2, r6
 80040c4:	0039      	movs	r1, r7
 80040c6:	9803      	ldr	r0, [sp, #12]
 80040c8:	f7ff ff6c 	bl	8003fa4 <__ssputs_r>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d100      	bne.n	80040d2 <_svfiprintf_r+0x6a>
 80040d0:	e0ae      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040d2:	6962      	ldr	r2, [r4, #20]
 80040d4:	9b05      	ldr	r3, [sp, #20]
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	6163      	str	r3, [r4, #20]
 80040dc:	782b      	ldrb	r3, [r5, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d100      	bne.n	80040e4 <_svfiprintf_r+0x7c>
 80040e2:	e0a5      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040e4:	2201      	movs	r2, #1
 80040e6:	2300      	movs	r3, #0
 80040e8:	4252      	negs	r2, r2
 80040ea:	6062      	str	r2, [r4, #4]
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	3254      	adds	r2, #84	; 0x54
 80040f0:	1852      	adds	r2, r2, r1
 80040f2:	1c6e      	adds	r6, r5, #1
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	60e3      	str	r3, [r4, #12]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	7013      	strb	r3, [r2, #0]
 80040fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80040fe:	2205      	movs	r2, #5
 8004100:	7831      	ldrb	r1, [r6, #0]
 8004102:	4854      	ldr	r0, [pc, #336]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004104:	f000 fa32 	bl	800456c <memchr>
 8004108:	1c75      	adds	r5, r6, #1
 800410a:	2800      	cmp	r0, #0
 800410c:	d11f      	bne.n	800414e <_svfiprintf_r+0xe6>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	06d3      	lsls	r3, r2, #27
 8004112:	d504      	bpl.n	800411e <_svfiprintf_r+0xb6>
 8004114:	2353      	movs	r3, #83	; 0x53
 8004116:	a904      	add	r1, sp, #16
 8004118:	185b      	adds	r3, r3, r1
 800411a:	2120      	movs	r1, #32
 800411c:	7019      	strb	r1, [r3, #0]
 800411e:	0713      	lsls	r3, r2, #28
 8004120:	d504      	bpl.n	800412c <_svfiprintf_r+0xc4>
 8004122:	2353      	movs	r3, #83	; 0x53
 8004124:	a904      	add	r1, sp, #16
 8004126:	185b      	adds	r3, r3, r1
 8004128:	212b      	movs	r1, #43	; 0x2b
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	7833      	ldrb	r3, [r6, #0]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	d016      	beq.n	8004160 <_svfiprintf_r+0xf8>
 8004132:	0035      	movs	r5, r6
 8004134:	2100      	movs	r1, #0
 8004136:	200a      	movs	r0, #10
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	782a      	ldrb	r2, [r5, #0]
 800413c:	1c6e      	adds	r6, r5, #1
 800413e:	3a30      	subs	r2, #48	; 0x30
 8004140:	2a09      	cmp	r2, #9
 8004142:	d94e      	bls.n	80041e2 <_svfiprintf_r+0x17a>
 8004144:	2900      	cmp	r1, #0
 8004146:	d111      	bne.n	800416c <_svfiprintf_r+0x104>
 8004148:	e017      	b.n	800417a <_svfiprintf_r+0x112>
 800414a:	3501      	adds	r5, #1
 800414c:	e7b0      	b.n	80040b0 <_svfiprintf_r+0x48>
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	1ac0      	subs	r0, r0, r3
 8004154:	2301      	movs	r3, #1
 8004156:	4083      	lsls	r3, r0
 8004158:	4313      	orrs	r3, r2
 800415a:	002e      	movs	r6, r5
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	e7ce      	b.n	80040fe <_svfiprintf_r+0x96>
 8004160:	9b07      	ldr	r3, [sp, #28]
 8004162:	1d19      	adds	r1, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9107      	str	r1, [sp, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db01      	blt.n	8004170 <_svfiprintf_r+0x108>
 800416c:	930b      	str	r3, [sp, #44]	; 0x2c
 800416e:	e004      	b.n	800417a <_svfiprintf_r+0x112>
 8004170:	425b      	negs	r3, r3
 8004172:	60e3      	str	r3, [r4, #12]
 8004174:	2302      	movs	r3, #2
 8004176:	4313      	orrs	r3, r2
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	782b      	ldrb	r3, [r5, #0]
 800417c:	2b2e      	cmp	r3, #46	; 0x2e
 800417e:	d10a      	bne.n	8004196 <_svfiprintf_r+0x12e>
 8004180:	786b      	ldrb	r3, [r5, #1]
 8004182:	2b2a      	cmp	r3, #42	; 0x2a
 8004184:	d135      	bne.n	80041f2 <_svfiprintf_r+0x18a>
 8004186:	9b07      	ldr	r3, [sp, #28]
 8004188:	3502      	adds	r5, #2
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9207      	str	r2, [sp, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db2b      	blt.n	80041ec <_svfiprintf_r+0x184>
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	4e30      	ldr	r6, [pc, #192]	; (8004258 <_svfiprintf_r+0x1f0>)
 8004198:	2203      	movs	r2, #3
 800419a:	0030      	movs	r0, r6
 800419c:	7829      	ldrb	r1, [r5, #0]
 800419e:	f000 f9e5 	bl	800456c <memchr>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d006      	beq.n	80041b4 <_svfiprintf_r+0x14c>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	1b80      	subs	r0, r0, r6
 80041aa:	4083      	lsls	r3, r0
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	3501      	adds	r5, #1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	7829      	ldrb	r1, [r5, #0]
 80041b6:	2206      	movs	r2, #6
 80041b8:	4828      	ldr	r0, [pc, #160]	; (800425c <_svfiprintf_r+0x1f4>)
 80041ba:	1c6e      	adds	r6, r5, #1
 80041bc:	7621      	strb	r1, [r4, #24]
 80041be:	f000 f9d5 	bl	800456c <memchr>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d03c      	beq.n	8004240 <_svfiprintf_r+0x1d8>
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <_svfiprintf_r+0x1f8>)
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d125      	bne.n	8004218 <_svfiprintf_r+0x1b0>
 80041cc:	2207      	movs	r2, #7
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	3307      	adds	r3, #7
 80041d2:	4393      	bics	r3, r2
 80041d4:	3308      	adds	r3, #8
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	6163      	str	r3, [r4, #20]
 80041e0:	e765      	b.n	80040ae <_svfiprintf_r+0x46>
 80041e2:	4343      	muls	r3, r0
 80041e4:	0035      	movs	r5, r6
 80041e6:	2101      	movs	r1, #1
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	e7a6      	b.n	800413a <_svfiprintf_r+0xd2>
 80041ec:	2301      	movs	r3, #1
 80041ee:	425b      	negs	r3, r3
 80041f0:	e7d0      	b.n	8004194 <_svfiprintf_r+0x12c>
 80041f2:	2300      	movs	r3, #0
 80041f4:	200a      	movs	r0, #10
 80041f6:	001a      	movs	r2, r3
 80041f8:	3501      	adds	r5, #1
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	7829      	ldrb	r1, [r5, #0]
 80041fe:	1c6e      	adds	r6, r5, #1
 8004200:	3930      	subs	r1, #48	; 0x30
 8004202:	2909      	cmp	r1, #9
 8004204:	d903      	bls.n	800420e <_svfiprintf_r+0x1a6>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0c5      	beq.n	8004196 <_svfiprintf_r+0x12e>
 800420a:	9209      	str	r2, [sp, #36]	; 0x24
 800420c:	e7c3      	b.n	8004196 <_svfiprintf_r+0x12e>
 800420e:	4342      	muls	r2, r0
 8004210:	0035      	movs	r5, r6
 8004212:	2301      	movs	r3, #1
 8004214:	1852      	adds	r2, r2, r1
 8004216:	e7f1      	b.n	80041fc <_svfiprintf_r+0x194>
 8004218:	ab07      	add	r3, sp, #28
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	003a      	movs	r2, r7
 800421e:	0021      	movs	r1, r4
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <_svfiprintf_r+0x1fc>)
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	e000      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004226:	bf00      	nop
 8004228:	9004      	str	r0, [sp, #16]
 800422a:	9b04      	ldr	r3, [sp, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	d1d3      	bne.n	80041d8 <_svfiprintf_r+0x170>
 8004230:	89bb      	ldrh	r3, [r7, #12]
 8004232:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004234:	065b      	lsls	r3, r3, #25
 8004236:	d400      	bmi.n	800423a <_svfiprintf_r+0x1d2>
 8004238:	e72d      	b.n	8004096 <_svfiprintf_r+0x2e>
 800423a:	2001      	movs	r0, #1
 800423c:	4240      	negs	r0, r0
 800423e:	e72a      	b.n	8004096 <_svfiprintf_r+0x2e>
 8004240:	ab07      	add	r3, sp, #28
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	003a      	movs	r2, r7
 8004246:	0021      	movs	r1, r4
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <_svfiprintf_r+0x1fc>)
 800424a:	9803      	ldr	r0, [sp, #12]
 800424c:	f000 f87c 	bl	8004348 <_printf_i>
 8004250:	e7ea      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	08004900 	.word	0x08004900
 8004258:	08004906 	.word	0x08004906
 800425c:	0800490a 	.word	0x0800490a
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fa5 	.word	0x08003fa5

08004268 <_printf_common>:
 8004268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800426a:	0015      	movs	r5, r2
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	688a      	ldr	r2, [r1, #8]
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	000c      	movs	r4, r1
 8004274:	9000      	str	r0, [sp, #0]
 8004276:	4293      	cmp	r3, r2
 8004278:	da00      	bge.n	800427c <_printf_common+0x14>
 800427a:	0013      	movs	r3, r2
 800427c:	0022      	movs	r2, r4
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	3243      	adds	r2, #67	; 0x43
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	2a00      	cmp	r2, #0
 8004286:	d001      	beq.n	800428c <_printf_common+0x24>
 8004288:	3301      	adds	r3, #1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	069b      	lsls	r3, r3, #26
 8004290:	d502      	bpl.n	8004298 <_printf_common+0x30>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	3302      	adds	r3, #2
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	2306      	movs	r3, #6
 800429c:	0017      	movs	r7, r2
 800429e:	401f      	ands	r7, r3
 80042a0:	421a      	tst	r2, r3
 80042a2:	d027      	beq.n	80042f4 <_printf_common+0x8c>
 80042a4:	0023      	movs	r3, r4
 80042a6:	3343      	adds	r3, #67	; 0x43
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4193      	sbcs	r3, r2
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	0692      	lsls	r2, r2, #26
 80042b2:	d430      	bmi.n	8004316 <_printf_common+0xae>
 80042b4:	0022      	movs	r2, r4
 80042b6:	9901      	ldr	r1, [sp, #4]
 80042b8:	9800      	ldr	r0, [sp, #0]
 80042ba:	9e08      	ldr	r6, [sp, #32]
 80042bc:	3243      	adds	r2, #67	; 0x43
 80042be:	47b0      	blx	r6
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d025      	beq.n	8004310 <_printf_common+0xa8>
 80042c4:	2306      	movs	r3, #6
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	682a      	ldr	r2, [r5, #0]
 80042ca:	68e1      	ldr	r1, [r4, #12]
 80042cc:	2500      	movs	r5, #0
 80042ce:	4003      	ands	r3, r0
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d103      	bne.n	80042dc <_printf_common+0x74>
 80042d4:	1a8d      	subs	r5, r1, r2
 80042d6:	43eb      	mvns	r3, r5
 80042d8:	17db      	asrs	r3, r3, #31
 80042da:	401d      	ands	r5, r3
 80042dc:	68a3      	ldr	r3, [r4, #8]
 80042de:	6922      	ldr	r2, [r4, #16]
 80042e0:	4293      	cmp	r3, r2
 80042e2:	dd01      	ble.n	80042e8 <_printf_common+0x80>
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	18ed      	adds	r5, r5, r3
 80042e8:	2700      	movs	r7, #0
 80042ea:	42bd      	cmp	r5, r7
 80042ec:	d120      	bne.n	8004330 <_printf_common+0xc8>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e010      	b.n	8004314 <_printf_common+0xac>
 80042f2:	3701      	adds	r7, #1
 80042f4:	68e3      	ldr	r3, [r4, #12]
 80042f6:	682a      	ldr	r2, [r5, #0]
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	42bb      	cmp	r3, r7
 80042fc:	ddd2      	ble.n	80042a4 <_printf_common+0x3c>
 80042fe:	0022      	movs	r2, r4
 8004300:	2301      	movs	r3, #1
 8004302:	9901      	ldr	r1, [sp, #4]
 8004304:	9800      	ldr	r0, [sp, #0]
 8004306:	9e08      	ldr	r6, [sp, #32]
 8004308:	3219      	adds	r2, #25
 800430a:	47b0      	blx	r6
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d1f0      	bne.n	80042f2 <_printf_common+0x8a>
 8004310:	2001      	movs	r0, #1
 8004312:	4240      	negs	r0, r0
 8004314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004316:	2030      	movs	r0, #48	; 0x30
 8004318:	18e1      	adds	r1, r4, r3
 800431a:	3143      	adds	r1, #67	; 0x43
 800431c:	7008      	strb	r0, [r1, #0]
 800431e:	0021      	movs	r1, r4
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	3145      	adds	r1, #69	; 0x45
 8004324:	7809      	ldrb	r1, [r1, #0]
 8004326:	18a2      	adds	r2, r4, r2
 8004328:	3243      	adds	r2, #67	; 0x43
 800432a:	3302      	adds	r3, #2
 800432c:	7011      	strb	r1, [r2, #0]
 800432e:	e7c1      	b.n	80042b4 <_printf_common+0x4c>
 8004330:	0022      	movs	r2, r4
 8004332:	2301      	movs	r3, #1
 8004334:	9901      	ldr	r1, [sp, #4]
 8004336:	9800      	ldr	r0, [sp, #0]
 8004338:	9e08      	ldr	r6, [sp, #32]
 800433a:	321a      	adds	r2, #26
 800433c:	47b0      	blx	r6
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa8>
 8004342:	3701      	adds	r7, #1
 8004344:	e7d1      	b.n	80042ea <_printf_common+0x82>
	...

08004348 <_printf_i>:
 8004348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434a:	b08b      	sub	sp, #44	; 0x2c
 800434c:	9206      	str	r2, [sp, #24]
 800434e:	000a      	movs	r2, r1
 8004350:	3243      	adds	r2, #67	; 0x43
 8004352:	9307      	str	r3, [sp, #28]
 8004354:	9005      	str	r0, [sp, #20]
 8004356:	9204      	str	r2, [sp, #16]
 8004358:	7e0a      	ldrb	r2, [r1, #24]
 800435a:	000c      	movs	r4, r1
 800435c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800435e:	2a78      	cmp	r2, #120	; 0x78
 8004360:	d807      	bhi.n	8004372 <_printf_i+0x2a>
 8004362:	2a62      	cmp	r2, #98	; 0x62
 8004364:	d809      	bhi.n	800437a <_printf_i+0x32>
 8004366:	2a00      	cmp	r2, #0
 8004368:	d100      	bne.n	800436c <_printf_i+0x24>
 800436a:	e0c1      	b.n	80044f0 <_printf_i+0x1a8>
 800436c:	2a58      	cmp	r2, #88	; 0x58
 800436e:	d100      	bne.n	8004372 <_printf_i+0x2a>
 8004370:	e08c      	b.n	800448c <_printf_i+0x144>
 8004372:	0026      	movs	r6, r4
 8004374:	3642      	adds	r6, #66	; 0x42
 8004376:	7032      	strb	r2, [r6, #0]
 8004378:	e022      	b.n	80043c0 <_printf_i+0x78>
 800437a:	0010      	movs	r0, r2
 800437c:	3863      	subs	r0, #99	; 0x63
 800437e:	2815      	cmp	r0, #21
 8004380:	d8f7      	bhi.n	8004372 <_printf_i+0x2a>
 8004382:	f7fb fec1 	bl	8000108 <__gnu_thumb1_case_shi>
 8004386:	0016      	.short	0x0016
 8004388:	fff6001f 	.word	0xfff6001f
 800438c:	fff6fff6 	.word	0xfff6fff6
 8004390:	001ffff6 	.word	0x001ffff6
 8004394:	fff6fff6 	.word	0xfff6fff6
 8004398:	fff6fff6 	.word	0xfff6fff6
 800439c:	003600a8 	.word	0x003600a8
 80043a0:	fff6009a 	.word	0xfff6009a
 80043a4:	00b9fff6 	.word	0x00b9fff6
 80043a8:	0036fff6 	.word	0x0036fff6
 80043ac:	fff6fff6 	.word	0xfff6fff6
 80043b0:	009e      	.short	0x009e
 80043b2:	0026      	movs	r6, r4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	3642      	adds	r6, #66	; 0x42
 80043b8:	1d11      	adds	r1, r2, #4
 80043ba:	6019      	str	r1, [r3, #0]
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	7033      	strb	r3, [r6, #0]
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0a7      	b.n	8004514 <_printf_i+0x1cc>
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	1d0a      	adds	r2, r1, #4
 80043ca:	0605      	lsls	r5, r0, #24
 80043cc:	d50b      	bpl.n	80043e6 <_printf_i+0x9e>
 80043ce:	680d      	ldr	r5, [r1, #0]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	da03      	bge.n	80043de <_printf_i+0x96>
 80043d6:	232d      	movs	r3, #45	; 0x2d
 80043d8:	9a04      	ldr	r2, [sp, #16]
 80043da:	426d      	negs	r5, r5
 80043dc:	7013      	strb	r3, [r2, #0]
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <_printf_i+0x21c>)
 80043e0:	270a      	movs	r7, #10
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	e01b      	b.n	800441e <_printf_i+0xd6>
 80043e6:	680d      	ldr	r5, [r1, #0]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	0641      	lsls	r1, r0, #25
 80043ec:	d5f1      	bpl.n	80043d2 <_printf_i+0x8a>
 80043ee:	b22d      	sxth	r5, r5
 80043f0:	e7ef      	b.n	80043d2 <_printf_i+0x8a>
 80043f2:	680d      	ldr	r5, [r1, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	1d08      	adds	r0, r1, #4
 80043f8:	6018      	str	r0, [r3, #0]
 80043fa:	062e      	lsls	r6, r5, #24
 80043fc:	d501      	bpl.n	8004402 <_printf_i+0xba>
 80043fe:	680d      	ldr	r5, [r1, #0]
 8004400:	e003      	b.n	800440a <_printf_i+0xc2>
 8004402:	066d      	lsls	r5, r5, #25
 8004404:	d5fb      	bpl.n	80043fe <_printf_i+0xb6>
 8004406:	680d      	ldr	r5, [r1, #0]
 8004408:	b2ad      	uxth	r5, r5
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <_printf_i+0x21c>)
 800440c:	2708      	movs	r7, #8
 800440e:	9303      	str	r3, [sp, #12]
 8004410:	2a6f      	cmp	r2, #111	; 0x6f
 8004412:	d000      	beq.n	8004416 <_printf_i+0xce>
 8004414:	3702      	adds	r7, #2
 8004416:	0023      	movs	r3, r4
 8004418:	2200      	movs	r2, #0
 800441a:	3343      	adds	r3, #67	; 0x43
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	60a3      	str	r3, [r4, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db03      	blt.n	800442e <_printf_i+0xe6>
 8004426:	2204      	movs	r2, #4
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	4391      	bics	r1, r2
 800442c:	6021      	str	r1, [r4, #0]
 800442e:	2d00      	cmp	r5, #0
 8004430:	d102      	bne.n	8004438 <_printf_i+0xf0>
 8004432:	9e04      	ldr	r6, [sp, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <_printf_i+0x10a>
 8004438:	9e04      	ldr	r6, [sp, #16]
 800443a:	0028      	movs	r0, r5
 800443c:	0039      	movs	r1, r7
 800443e:	f7fb fef3 	bl	8000228 <__aeabi_uidivmod>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	3e01      	subs	r6, #1
 8004446:	5c5b      	ldrb	r3, [r3, r1]
 8004448:	7033      	strb	r3, [r6, #0]
 800444a:	002b      	movs	r3, r5
 800444c:	0005      	movs	r5, r0
 800444e:	429f      	cmp	r7, r3
 8004450:	d9f3      	bls.n	800443a <_printf_i+0xf2>
 8004452:	2f08      	cmp	r7, #8
 8004454:	d109      	bne.n	800446a <_printf_i+0x122>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d506      	bpl.n	800446a <_printf_i+0x122>
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	4293      	cmp	r3, r2
 8004462:	dc02      	bgt.n	800446a <_printf_i+0x122>
 8004464:	2330      	movs	r3, #48	; 0x30
 8004466:	3e01      	subs	r6, #1
 8004468:	7033      	strb	r3, [r6, #0]
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	1b9b      	subs	r3, r3, r6
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	9b07      	ldr	r3, [sp, #28]
 8004472:	0021      	movs	r1, r4
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	9805      	ldr	r0, [sp, #20]
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	aa09      	add	r2, sp, #36	; 0x24
 800447c:	f7ff fef4 	bl	8004268 <_printf_common>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d14c      	bne.n	800451e <_printf_i+0x1d6>
 8004484:	2001      	movs	r0, #1
 8004486:	4240      	negs	r0, r0
 8004488:	b00b      	add	sp, #44	; 0x2c
 800448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448c:	3145      	adds	r1, #69	; 0x45
 800448e:	700a      	strb	r2, [r1, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <_printf_i+0x21c>)
 8004492:	9203      	str	r2, [sp, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	6821      	ldr	r1, [r4, #0]
 8004498:	ca20      	ldmia	r2!, {r5}
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	0608      	lsls	r0, r1, #24
 800449e:	d516      	bpl.n	80044ce <_printf_i+0x186>
 80044a0:	07cb      	lsls	r3, r1, #31
 80044a2:	d502      	bpl.n	80044aa <_printf_i+0x162>
 80044a4:	2320      	movs	r3, #32
 80044a6:	4319      	orrs	r1, r3
 80044a8:	6021      	str	r1, [r4, #0]
 80044aa:	2710      	movs	r7, #16
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d1b2      	bne.n	8004416 <_printf_i+0xce>
 80044b0:	2320      	movs	r3, #32
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	439a      	bics	r2, r3
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	e7ad      	b.n	8004416 <_printf_i+0xce>
 80044ba:	2220      	movs	r2, #32
 80044bc:	6809      	ldr	r1, [r1, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	0022      	movs	r2, r4
 80044c4:	2178      	movs	r1, #120	; 0x78
 80044c6:	3245      	adds	r2, #69	; 0x45
 80044c8:	7011      	strb	r1, [r2, #0]
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <_printf_i+0x220>)
 80044cc:	e7e1      	b.n	8004492 <_printf_i+0x14a>
 80044ce:	0648      	lsls	r0, r1, #25
 80044d0:	d5e6      	bpl.n	80044a0 <_printf_i+0x158>
 80044d2:	b2ad      	uxth	r5, r5
 80044d4:	e7e4      	b.n	80044a0 <_printf_i+0x158>
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	680d      	ldr	r5, [r1, #0]
 80044da:	1d10      	adds	r0, r2, #4
 80044dc:	6949      	ldr	r1, [r1, #20]
 80044de:	6018      	str	r0, [r3, #0]
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	062e      	lsls	r6, r5, #24
 80044e4:	d501      	bpl.n	80044ea <_printf_i+0x1a2>
 80044e6:	6019      	str	r1, [r3, #0]
 80044e8:	e002      	b.n	80044f0 <_printf_i+0x1a8>
 80044ea:	066d      	lsls	r5, r5, #25
 80044ec:	d5fb      	bpl.n	80044e6 <_printf_i+0x19e>
 80044ee:	8019      	strh	r1, [r3, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9e04      	ldr	r6, [sp, #16]
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	e7bb      	b.n	8004470 <_printf_i+0x128>
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	1d11      	adds	r1, r2, #4
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	6816      	ldr	r6, [r2, #0]
 8004500:	2100      	movs	r1, #0
 8004502:	0030      	movs	r0, r6
 8004504:	6862      	ldr	r2, [r4, #4]
 8004506:	f000 f831 	bl	800456c <memchr>
 800450a:	2800      	cmp	r0, #0
 800450c:	d001      	beq.n	8004512 <_printf_i+0x1ca>
 800450e:	1b80      	subs	r0, r0, r6
 8004510:	6060      	str	r0, [r4, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	2300      	movs	r3, #0
 8004518:	9a04      	ldr	r2, [sp, #16]
 800451a:	7013      	strb	r3, [r2, #0]
 800451c:	e7a8      	b.n	8004470 <_printf_i+0x128>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	0032      	movs	r2, r6
 8004522:	9906      	ldr	r1, [sp, #24]
 8004524:	9805      	ldr	r0, [sp, #20]
 8004526:	9d07      	ldr	r5, [sp, #28]
 8004528:	47a8      	blx	r5
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d0aa      	beq.n	8004484 <_printf_i+0x13c>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	079b      	lsls	r3, r3, #30
 8004532:	d415      	bmi.n	8004560 <_printf_i+0x218>
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	68e0      	ldr	r0, [r4, #12]
 8004538:	4298      	cmp	r0, r3
 800453a:	daa5      	bge.n	8004488 <_printf_i+0x140>
 800453c:	0018      	movs	r0, r3
 800453e:	e7a3      	b.n	8004488 <_printf_i+0x140>
 8004540:	0022      	movs	r2, r4
 8004542:	2301      	movs	r3, #1
 8004544:	9906      	ldr	r1, [sp, #24]
 8004546:	9805      	ldr	r0, [sp, #20]
 8004548:	9e07      	ldr	r6, [sp, #28]
 800454a:	3219      	adds	r2, #25
 800454c:	47b0      	blx	r6
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	d098      	beq.n	8004484 <_printf_i+0x13c>
 8004552:	3501      	adds	r5, #1
 8004554:	68e3      	ldr	r3, [r4, #12]
 8004556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	42ab      	cmp	r3, r5
 800455c:	dcf0      	bgt.n	8004540 <_printf_i+0x1f8>
 800455e:	e7e9      	b.n	8004534 <_printf_i+0x1ec>
 8004560:	2500      	movs	r5, #0
 8004562:	e7f7      	b.n	8004554 <_printf_i+0x20c>
 8004564:	08004911 	.word	0x08004911
 8004568:	08004922 	.word	0x08004922

0800456c <memchr>:
 800456c:	b2c9      	uxtb	r1, r1
 800456e:	1882      	adds	r2, r0, r2
 8004570:	4290      	cmp	r0, r2
 8004572:	d101      	bne.n	8004578 <memchr+0xc>
 8004574:	2000      	movs	r0, #0
 8004576:	4770      	bx	lr
 8004578:	7803      	ldrb	r3, [r0, #0]
 800457a:	428b      	cmp	r3, r1
 800457c:	d0fb      	beq.n	8004576 <memchr+0xa>
 800457e:	3001      	adds	r0, #1
 8004580:	e7f6      	b.n	8004570 <memchr+0x4>

08004582 <memcpy>:
 8004582:	2300      	movs	r3, #0
 8004584:	b510      	push	{r4, lr}
 8004586:	429a      	cmp	r2, r3
 8004588:	d100      	bne.n	800458c <memcpy+0xa>
 800458a:	bd10      	pop	{r4, pc}
 800458c:	5ccc      	ldrb	r4, [r1, r3]
 800458e:	54c4      	strb	r4, [r0, r3]
 8004590:	3301      	adds	r3, #1
 8004592:	e7f8      	b.n	8004586 <memcpy+0x4>

08004594 <memmove>:
 8004594:	b510      	push	{r4, lr}
 8004596:	4288      	cmp	r0, r1
 8004598:	d902      	bls.n	80045a0 <memmove+0xc>
 800459a:	188b      	adds	r3, r1, r2
 800459c:	4298      	cmp	r0, r3
 800459e:	d303      	bcc.n	80045a8 <memmove+0x14>
 80045a0:	2300      	movs	r3, #0
 80045a2:	e007      	b.n	80045b4 <memmove+0x20>
 80045a4:	5c8b      	ldrb	r3, [r1, r2]
 80045a6:	5483      	strb	r3, [r0, r2]
 80045a8:	3a01      	subs	r2, #1
 80045aa:	d2fb      	bcs.n	80045a4 <memmove+0x10>
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	5ccc      	ldrb	r4, [r1, r3]
 80045b0:	54c4      	strb	r4, [r0, r3]
 80045b2:	3301      	adds	r3, #1
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1fa      	bne.n	80045ae <memmove+0x1a>
 80045b8:	e7f8      	b.n	80045ac <memmove+0x18>
	...

080045bc <_free_r>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	0005      	movs	r5, r0
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d010      	beq.n	80045e6 <_free_r+0x2a>
 80045c4:	1f0c      	subs	r4, r1, #4
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da00      	bge.n	80045ce <_free_r+0x12>
 80045cc:	18e4      	adds	r4, r4, r3
 80045ce:	0028      	movs	r0, r5
 80045d0:	f000 f918 	bl	8004804 <__malloc_lock>
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <_free_r+0x90>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <_free_r+0x2c>
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6014      	str	r4, [r2, #0]
 80045e0:	0028      	movs	r0, r5
 80045e2:	f000 f917 	bl	8004814 <__malloc_unlock>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d908      	bls.n	80045fe <_free_r+0x42>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	1860      	adds	r0, r4, r1
 80045f0:	4283      	cmp	r3, r0
 80045f2:	d1f3      	bne.n	80045dc <_free_r+0x20>
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	1841      	adds	r1, r0, r1
 80045fa:	6021      	str	r1, [r4, #0]
 80045fc:	e7ee      	b.n	80045dc <_free_r+0x20>
 80045fe:	001a      	movs	r2, r3
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <_free_r+0x4e>
 8004606:	42a3      	cmp	r3, r4
 8004608:	d9f9      	bls.n	80045fe <_free_r+0x42>
 800460a:	6811      	ldr	r1, [r2, #0]
 800460c:	1850      	adds	r0, r2, r1
 800460e:	42a0      	cmp	r0, r4
 8004610:	d10b      	bne.n	800462a <_free_r+0x6e>
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	1809      	adds	r1, r1, r0
 8004616:	1850      	adds	r0, r2, r1
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	4283      	cmp	r3, r0
 800461c:	d1e0      	bne.n	80045e0 <_free_r+0x24>
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	1841      	adds	r1, r0, r1
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	6053      	str	r3, [r2, #4]
 8004628:	e7da      	b.n	80045e0 <_free_r+0x24>
 800462a:	42a0      	cmp	r0, r4
 800462c:	d902      	bls.n	8004634 <_free_r+0x78>
 800462e:	230c      	movs	r3, #12
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	e7d5      	b.n	80045e0 <_free_r+0x24>
 8004634:	6821      	ldr	r1, [r4, #0]
 8004636:	1860      	adds	r0, r4, r1
 8004638:	4283      	cmp	r3, r0
 800463a:	d103      	bne.n	8004644 <_free_r+0x88>
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	1841      	adds	r1, r0, r1
 8004642:	6021      	str	r1, [r4, #0]
 8004644:	6063      	str	r3, [r4, #4]
 8004646:	6054      	str	r4, [r2, #4]
 8004648:	e7ca      	b.n	80045e0 <_free_r+0x24>
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	200001d0 	.word	0x200001d0

08004650 <sbrk_aligned>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4e0f      	ldr	r6, [pc, #60]	; (8004690 <sbrk_aligned+0x40>)
 8004654:	000d      	movs	r5, r1
 8004656:	6831      	ldr	r1, [r6, #0]
 8004658:	0004      	movs	r4, r0
 800465a:	2900      	cmp	r1, #0
 800465c:	d102      	bne.n	8004664 <sbrk_aligned+0x14>
 800465e:	f000 f8bf 	bl	80047e0 <_sbrk_r>
 8004662:	6030      	str	r0, [r6, #0]
 8004664:	0029      	movs	r1, r5
 8004666:	0020      	movs	r0, r4
 8004668:	f000 f8ba 	bl	80047e0 <_sbrk_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d00a      	beq.n	8004686 <sbrk_aligned+0x36>
 8004670:	2303      	movs	r3, #3
 8004672:	1cc5      	adds	r5, r0, #3
 8004674:	439d      	bics	r5, r3
 8004676:	42a8      	cmp	r0, r5
 8004678:	d007      	beq.n	800468a <sbrk_aligned+0x3a>
 800467a:	1a29      	subs	r1, r5, r0
 800467c:	0020      	movs	r0, r4
 800467e:	f000 f8af 	bl	80047e0 <_sbrk_r>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d101      	bne.n	800468a <sbrk_aligned+0x3a>
 8004686:	2501      	movs	r5, #1
 8004688:	426d      	negs	r5, r5
 800468a:	0028      	movs	r0, r5
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	200001d4 	.word	0x200001d4

08004694 <_malloc_r>:
 8004694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004696:	2203      	movs	r2, #3
 8004698:	1ccb      	adds	r3, r1, #3
 800469a:	4393      	bics	r3, r2
 800469c:	3308      	adds	r3, #8
 800469e:	0006      	movs	r6, r0
 80046a0:	001f      	movs	r7, r3
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d232      	bcs.n	800470c <_malloc_r+0x78>
 80046a6:	270c      	movs	r7, #12
 80046a8:	42b9      	cmp	r1, r7
 80046aa:	d831      	bhi.n	8004710 <_malloc_r+0x7c>
 80046ac:	0030      	movs	r0, r6
 80046ae:	f000 f8a9 	bl	8004804 <__malloc_lock>
 80046b2:	4d32      	ldr	r5, [pc, #200]	; (800477c <_malloc_r+0xe8>)
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	001c      	movs	r4, r3
 80046b8:	2c00      	cmp	r4, #0
 80046ba:	d12e      	bne.n	800471a <_malloc_r+0x86>
 80046bc:	0039      	movs	r1, r7
 80046be:	0030      	movs	r0, r6
 80046c0:	f7ff ffc6 	bl	8004650 <sbrk_aligned>
 80046c4:	0004      	movs	r4, r0
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d11e      	bne.n	8004708 <_malloc_r+0x74>
 80046ca:	682c      	ldr	r4, [r5, #0]
 80046cc:	0025      	movs	r5, r4
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	d14a      	bne.n	8004768 <_malloc_r+0xd4>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0029      	movs	r1, r5
 80046d6:	18e3      	adds	r3, r4, r3
 80046d8:	0030      	movs	r0, r6
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	f000 f880 	bl	80047e0 <_sbrk_r>
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	4283      	cmp	r3, r0
 80046e4:	d143      	bne.n	800476e <_malloc_r+0xda>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	3703      	adds	r7, #3
 80046ea:	1aff      	subs	r7, r7, r3
 80046ec:	2303      	movs	r3, #3
 80046ee:	439f      	bics	r7, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	2f0c      	cmp	r7, #12
 80046f4:	d200      	bcs.n	80046f8 <_malloc_r+0x64>
 80046f6:	270c      	movs	r7, #12
 80046f8:	0039      	movs	r1, r7
 80046fa:	0030      	movs	r0, r6
 80046fc:	f7ff ffa8 	bl	8004650 <sbrk_aligned>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d034      	beq.n	800476e <_malloc_r+0xda>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	19df      	adds	r7, r3, r7
 8004708:	6027      	str	r7, [r4, #0]
 800470a:	e013      	b.n	8004734 <_malloc_r+0xa0>
 800470c:	2b00      	cmp	r3, #0
 800470e:	dacb      	bge.n	80046a8 <_malloc_r+0x14>
 8004710:	230c      	movs	r3, #12
 8004712:	2500      	movs	r5, #0
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	0028      	movs	r0, r5
 8004718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	1bd1      	subs	r1, r2, r7
 800471e:	d420      	bmi.n	8004762 <_malloc_r+0xce>
 8004720:	290b      	cmp	r1, #11
 8004722:	d917      	bls.n	8004754 <_malloc_r+0xc0>
 8004724:	19e2      	adds	r2, r4, r7
 8004726:	6027      	str	r7, [r4, #0]
 8004728:	42a3      	cmp	r3, r4
 800472a:	d111      	bne.n	8004750 <_malloc_r+0xbc>
 800472c:	602a      	str	r2, [r5, #0]
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	6053      	str	r3, [r2, #4]
 8004734:	0030      	movs	r0, r6
 8004736:	0025      	movs	r5, r4
 8004738:	f000 f86c 	bl	8004814 <__malloc_unlock>
 800473c:	2207      	movs	r2, #7
 800473e:	350b      	adds	r5, #11
 8004740:	1d23      	adds	r3, r4, #4
 8004742:	4395      	bics	r5, r2
 8004744:	1aea      	subs	r2, r5, r3
 8004746:	429d      	cmp	r5, r3
 8004748:	d0e5      	beq.n	8004716 <_malloc_r+0x82>
 800474a:	1b5b      	subs	r3, r3, r5
 800474c:	50a3      	str	r3, [r4, r2]
 800474e:	e7e2      	b.n	8004716 <_malloc_r+0x82>
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	e7ec      	b.n	800472e <_malloc_r+0x9a>
 8004754:	6862      	ldr	r2, [r4, #4]
 8004756:	42a3      	cmp	r3, r4
 8004758:	d101      	bne.n	800475e <_malloc_r+0xca>
 800475a:	602a      	str	r2, [r5, #0]
 800475c:	e7ea      	b.n	8004734 <_malloc_r+0xa0>
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	e7e8      	b.n	8004734 <_malloc_r+0xa0>
 8004762:	0023      	movs	r3, r4
 8004764:	6864      	ldr	r4, [r4, #4]
 8004766:	e7a7      	b.n	80046b8 <_malloc_r+0x24>
 8004768:	002c      	movs	r4, r5
 800476a:	686d      	ldr	r5, [r5, #4]
 800476c:	e7af      	b.n	80046ce <_malloc_r+0x3a>
 800476e:	230c      	movs	r3, #12
 8004770:	0030      	movs	r0, r6
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f000 f84e 	bl	8004814 <__malloc_unlock>
 8004778:	e7cd      	b.n	8004716 <_malloc_r+0x82>
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	200001d0 	.word	0x200001d0

08004780 <_realloc_r>:
 8004780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004782:	0007      	movs	r7, r0
 8004784:	000e      	movs	r6, r1
 8004786:	0014      	movs	r4, r2
 8004788:	2900      	cmp	r1, #0
 800478a:	d105      	bne.n	8004798 <_realloc_r+0x18>
 800478c:	0011      	movs	r1, r2
 800478e:	f7ff ff81 	bl	8004694 <_malloc_r>
 8004792:	0005      	movs	r5, r0
 8004794:	0028      	movs	r0, r5
 8004796:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004798:	2a00      	cmp	r2, #0
 800479a:	d103      	bne.n	80047a4 <_realloc_r+0x24>
 800479c:	f7ff ff0e 	bl	80045bc <_free_r>
 80047a0:	0025      	movs	r5, r4
 80047a2:	e7f7      	b.n	8004794 <_realloc_r+0x14>
 80047a4:	f000 f83e 	bl	8004824 <_malloc_usable_size_r>
 80047a8:	9001      	str	r0, [sp, #4]
 80047aa:	4284      	cmp	r4, r0
 80047ac:	d803      	bhi.n	80047b6 <_realloc_r+0x36>
 80047ae:	0035      	movs	r5, r6
 80047b0:	0843      	lsrs	r3, r0, #1
 80047b2:	42a3      	cmp	r3, r4
 80047b4:	d3ee      	bcc.n	8004794 <_realloc_r+0x14>
 80047b6:	0021      	movs	r1, r4
 80047b8:	0038      	movs	r0, r7
 80047ba:	f7ff ff6b 	bl	8004694 <_malloc_r>
 80047be:	1e05      	subs	r5, r0, #0
 80047c0:	d0e8      	beq.n	8004794 <_realloc_r+0x14>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	0022      	movs	r2, r4
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d900      	bls.n	80047cc <_realloc_r+0x4c>
 80047ca:	001a      	movs	r2, r3
 80047cc:	0031      	movs	r1, r6
 80047ce:	0028      	movs	r0, r5
 80047d0:	f7ff fed7 	bl	8004582 <memcpy>
 80047d4:	0031      	movs	r1, r6
 80047d6:	0038      	movs	r0, r7
 80047d8:	f7ff fef0 	bl	80045bc <_free_r>
 80047dc:	e7da      	b.n	8004794 <_realloc_r+0x14>
	...

080047e0 <_sbrk_r>:
 80047e0:	2300      	movs	r3, #0
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x20>)
 80047e6:	0004      	movs	r4, r0
 80047e8:	0008      	movs	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fc04 	bl	8000ff8 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d103      	bne.n	80047fc <_sbrk_r+0x1c>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d000      	beq.n	80047fc <_sbrk_r+0x1c>
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	200001d8 	.word	0x200001d8

08004804 <__malloc_lock>:
 8004804:	b510      	push	{r4, lr}
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <__malloc_lock+0xc>)
 8004808:	f000 f814 	bl	8004834 <__retarget_lock_acquire_recursive>
 800480c:	bd10      	pop	{r4, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	200001dc 	.word	0x200001dc

08004814 <__malloc_unlock>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4802      	ldr	r0, [pc, #8]	; (8004820 <__malloc_unlock+0xc>)
 8004818:	f000 f80d 	bl	8004836 <__retarget_lock_release_recursive>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	200001dc 	.word	0x200001dc

08004824 <_malloc_usable_size_r>:
 8004824:	1f0b      	subs	r3, r1, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1f18      	subs	r0, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	da01      	bge.n	8004832 <_malloc_usable_size_r+0xe>
 800482e:	580b      	ldr	r3, [r1, r0]
 8004830:	18c0      	adds	r0, r0, r3
 8004832:	4770      	bx	lr

08004834 <__retarget_lock_acquire_recursive>:
 8004834:	4770      	bx	lr

08004836 <__retarget_lock_release_recursive>:
 8004836:	4770      	bx	lr

08004838 <_init>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

08004844 <_fini>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr
