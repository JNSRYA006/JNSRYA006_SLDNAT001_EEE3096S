
EEE3096S_2022_Prac_4_PWM_DAC_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002544  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002634  08002634  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002634  08002634  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002634  08002634  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002648  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002648  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000845a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ae  00000000  00000000  0002848e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00029b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ed5  00000000  00000000  0002ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a421  00000000  00000000  0003bbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068a31  00000000  00000000  0004601e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aea4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002124  00000000  00000000  000aeaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025ec 	.word	0x080025ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025ec 	.word	0x080025ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb07 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f80d 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f971 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f951 	bl	80004d8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f851 	bl	80002dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800023a:	f000 f8cd 	bl	80003d8 <MX_TIM3_Init>
  //Start TIM3 in PWM mode on channel 1

  //Start TIM2 in Output Compare (OC) mode on channel 1.

  //Start the DMA in interrupt (IT) mode.
  uint32_t DestAddress = (uint32_t) &(TIM3->CCR1);
 800023e:	4b01      	ldr	r3, [pc, #4]	; (8000244 <main+0x24>)
 8000240:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000242:	e7fe      	b.n	8000242 <main+0x22>
 8000244:	40000434 	.word	0x40000434

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b091      	sub	sp, #68	; 0x44
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2410      	movs	r4, #16
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2330      	movs	r3, #48	; 0x30
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 f9bf 	bl	80025dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	003b      	movs	r3, r7
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 f9b8 	bl	80025dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	0021      	movs	r1, r4
 800026e:	187b      	adds	r3, r7, r1
 8000270:	2202      	movs	r2, #2
 8000272:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	187b      	adds	r3, r7, r1
 8000276:	2201      	movs	r2, #1
 8000278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2210      	movs	r2, #16
 800027e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2202      	movs	r2, #2
 8000284:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2200      	movs	r2, #0
 800028a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	22a0      	movs	r2, #160	; 0xa0
 8000290:	0392      	lsls	r2, r2, #14
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	187b      	adds	r3, r7, r1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fec7 	bl	8001030 <HAL_RCC_OscConfig>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002a6:	f000 f9af 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	003b      	movs	r3, r7
 80002ac:	2207      	movs	r2, #7
 80002ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2202      	movs	r2, #2
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	003b      	movs	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c2:	003b      	movs	r3, r7
 80002c4:	2101      	movs	r1, #1
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 f9cc 	bl	8001664 <HAL_RCC_ClockConfig>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002d0:	f000 f99a 	bl	8000608 <Error_Handler>
  }
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b011      	add	sp, #68	; 0x44
 80002da:	bd90      	pop	{r4, r7, pc}

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	2328      	movs	r3, #40	; 0x28
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2310      	movs	r3, #16
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 f975 	bl	80025dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f2:	2320      	movs	r3, #32
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	2308      	movs	r3, #8
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 f96d 	bl	80025dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	231c      	movs	r3, #28
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 f966 	bl	80025dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <MX_TIM2_Init+0xf4>)
 8000312:	2280      	movs	r2, #128	; 0x80
 8000314:	05d2      	lsls	r2, r2, #23
 8000316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000318:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <MX_TIM2_Init+0xf4>)
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031e:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_TIM2_Init+0xf4>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_Ticks - 1; //To make the frequency what we want it to be
 8000324:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <MX_TIM2_Init+0xf8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1e5a      	subs	r2, r3, #1
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_TIM2_Init+0xf4>)
 800032c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <MX_TIM2_Init+0xf4>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <MX_TIM2_Init+0xf4>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033a:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <MX_TIM2_Init+0xf4>)
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fac3 	bl	80018c8 <HAL_TIM_Base_Init>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f95f 	bl	8000608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034a:	2128      	movs	r1, #40	; 0x28
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2280      	movs	r2, #128	; 0x80
 8000350:	0152      	lsls	r2, r2, #5
 8000352:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000354:	187a      	adds	r2, r7, r1
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_TIM2_Init+0xf4>)
 8000358:	0011      	movs	r1, r2
 800035a:	0018      	movs	r0, r3
 800035c:	f001 fcd2 	bl	8001d04 <HAL_TIM_ConfigClockSource>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 f950 	bl	8000608 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM2_Init+0xf4>)
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fafc 	bl	8001968 <HAL_TIM_OC_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000374:	f000 f948 	bl	8000608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000378:	2120      	movs	r1, #32
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000386:	187a      	adds	r2, r7, r1
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_TIM2_Init+0xf4>)
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f002 f8a3 	bl	80024d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000396:	f000 f937 	bl	8000608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b2:	1d39      	adds	r1, r7, #4
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_TIM2_Init+0xf4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fb85 	bl	8001ac8 <HAL_TIM_OC_ConfigChannel>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80003c2:	f000 f921 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b00e      	add	sp, #56	; 0x38
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000028 	.word	0x20000028
 80003d4:	200000fc 	.word	0x200000fc

080003d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	2328      	movs	r3, #40	; 0x28
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	0018      	movs	r0, r3
 80003e4:	2310      	movs	r3, #16
 80003e6:	001a      	movs	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f002 f8f7 	bl	80025dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ee:	2320      	movs	r3, #32
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2308      	movs	r3, #8
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 f8ef 	bl	80025dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	0018      	movs	r0, r3
 8000402:	231c      	movs	r3, #28
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f002 f8e8 	bl	80025dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <MX_TIM3_Init+0xf4>)
 800040e:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <MX_TIM3_Init+0xf8>)
 8000410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_TIM3_Init+0xf4>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <MX_TIM3_Init+0xfc>)
 8000422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_TIM3_Init+0xf4>)
 800042c:	2280      	movs	r2, #128	; 0x80
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fa48 	bl	80018c8 <HAL_TIM_Base_Init>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800043c:	f000 f8e4 	bl	8000608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000440:	2128      	movs	r1, #40	; 0x28
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0152      	lsls	r2, r2, #5
 8000448:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800044a:	187a      	adds	r2, r7, r1
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_TIM3_Init+0xf4>)
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fc57 	bl	8001d04 <HAL_TIM_ConfigClockSource>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800045a:	f000 f8d5 	bl	8000608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000460:	0018      	movs	r0, r3
 8000462:	f001 fad9 	bl	8001a18 <HAL_TIM_PWM_Init>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800046a:	f000 f8cd 	bl	8000608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046e:	2120      	movs	r1, #32
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800047c:	187a      	adds	r2, r7, r1
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_TIM3_Init+0xf4>)
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f002 f828 	bl	80024d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800048c:	f000 f8bc 	bl	8000608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2260      	movs	r2, #96	; 0x60
 8000494:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a8:	1d39      	adds	r1, r7, #4
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_TIM3_Init+0xf4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fb62 	bl	8001b78 <HAL_TIM_PWM_ConfigChannel>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80004b8:	f000 f8a6 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <MX_TIM3_Init+0xf4>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 f928 	bl	8000714 <HAL_TIM_MspPostInit>

}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b00e      	add	sp, #56	; 0x38
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000070 	.word	0x20000070
 80004d0:	40000400 	.word	0x40000400
 80004d4:	000003ff 	.word	0x000003ff

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x38>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_DMA_Init+0x38>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200b      	movs	r0, #11
 80004fc:	f000 faac 	bl	8000a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000500:	200b      	movs	r0, #11
 8000502:	f000 fabe 	bl	8000a82 <HAL_NVIC_EnableIRQ>

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b089      	sub	sp, #36	; 0x24
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	240c      	movs	r4, #12
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 f859 	bl	80025dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b31      	ldr	r3, [pc, #196]	; (80005f0 <MX_GPIO_Init+0xdc>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	03c9      	lsls	r1, r1, #15
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <MX_GPIO_Init+0xdc>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	03db      	lsls	r3, r3, #15
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <MX_GPIO_Init+0xdc>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0309      	lsls	r1, r1, #12
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	031b      	lsls	r3, r3, #12
 8000578:	4013      	ands	r3, r2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800057e:	23c0      	movs	r3, #192	; 0xc0
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	481c      	ldr	r0, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xe0>)
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f000 fd0e 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2288      	movs	r2, #136	; 0x88
 8000596:	0352      	lsls	r2, r2, #13
 8000598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	193a      	adds	r2, r7, r4
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fb8d 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	22c0      	movs	r2, #192	; 0xc0
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2201      	movs	r2, #1
 80005bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <MX_GPIO_Init+0xe0>)
 80005ce:	0019      	movs	r1, r3
 80005d0:	0010      	movs	r0, r2
 80005d2:	f000 fb79 	bl	8000cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2005      	movs	r0, #5
 80005dc:	f000 fa3c 	bl	8000a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005e0:	2005      	movs	r0, #5
 80005e2:	f000 fa4e 	bl	8000a82 <HAL_NVIC_EnableIRQ>

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b009      	add	sp, #36	; 0x24
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000800 	.word	0x48000800

080005f8 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//TASK 5
	//Disable DMA transfer, start DMA in IT mode with new source and re enable transfer
	//Remember to debounce using HAL_GetTick()


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fcf1 	bl	8000fe4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	69da      	ldr	r2, [r3, #28]
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0549      	lsls	r1, r1, #21
 800063c:	430a      	orrs	r2, r1
 800063e:	61da      	str	r2, [r3, #28]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_MspInit+0x44>)
 8000642:	69da      	ldr	r2, [r3, #28]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	429a      	cmp	r2, r3
 800066e:	d134      	bne.n	80006da <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 8000672:	69da      	ldr	r2, [r3, #28]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 8000676:	2101      	movs	r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	2201      	movs	r2, #1
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <HAL_TIM_Base_MspInit+0xb0>)
 800068c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 8000690:	2210      	movs	r2, #16
 8000692:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006b2:	2220      	movs	r2, #32
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f9fc 	bl	8000abc <HAL_DMA_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80006c8:	f7ff ff9e 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_TIM_Base_MspInit+0xac>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006d8:	e010      	b.n	80006fc <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM3)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <HAL_TIM_Base_MspInit+0xb4>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10b      	bne.n	80006fc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 80006e6:	69da      	ldr	r2, [r3, #28]
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 80006ea:	2102      	movs	r1, #2
 80006ec:	430a      	orrs	r2, r1
 80006ee:	61da      	str	r2, [r3, #28]
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <HAL_TIM_Base_MspInit+0xa8>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	2202      	movs	r2, #2
 80006f6:	4013      	ands	r3, r2
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b004      	add	sp, #16
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	200000b8 	.word	0x200000b8
 800070c:	40020058 	.word	0x40020058
 8000710:	40000400 	.word	0x40000400

08000714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	240c      	movs	r4, #12
 800071e:	193b      	adds	r3, r7, r4
 8000720:	0018      	movs	r0, r3
 8000722:	2314      	movs	r3, #20
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f001 ff58 	bl	80025dc <memset>
  if(htim->Instance==TIM3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <HAL_TIM_MspPostInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d124      	bne.n	8000780 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 8000738:	695a      	ldr	r2, [r3, #20]
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0289      	lsls	r1, r1, #10
 8000740:	430a      	orrs	r2, r1
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_TIM_MspPostInit+0x78>)
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000752:	0021      	movs	r1, r4
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2240      	movs	r2, #64	; 0x40
 8000758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	187a      	adds	r2, r7, r1
 8000774:	2390      	movs	r3, #144	; 0x90
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 faa4 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b009      	add	sp, #36	; 0x24
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40000400 	.word	0x40000400
 800078c:	40021000 	.word	0x40021000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f888 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <DMA1_Channel4_5_IRQHandler+0x14>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f9c0 	bl	8000b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	200000b8 	.word	0x200000b8

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490e      	ldr	r1, [pc, #56]	; (8000824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0b      	ldr	r4, [pc, #44]	; (8000830 <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080e:	f7ff ffe3 	bl	80007d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000812:	f001 febf 	bl	8002594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fd03 	bl	8000220 <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   r0, =_estack
 800081c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000828:	0800263c 	.word	0x0800263c
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000830:	20000104 	.word	0x20000104

08000834 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_COMP_IRQHandler>
	...

08000838 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_Init+0x24>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_Init+0x24>)
 8000842:	2110      	movs	r1, #16
 8000844:	430a      	orrs	r2, r1
 8000846:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000848:	2000      	movs	r0, #0
 800084a:	f000 f809 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084e:	f7ff fee1 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_InitTick+0x5c>)
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_InitTick+0x60>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	0019      	movs	r1, r3
 8000872:	23fa      	movs	r3, #250	; 0xfa
 8000874:	0098      	lsls	r0, r3, #2
 8000876:	f7ff fc47 	bl	8000108 <__udivsi3>
 800087a:	0003      	movs	r3, r0
 800087c:	0019      	movs	r1, r3
 800087e:	0020      	movs	r0, r4
 8000880:	f7ff fc42 	bl	8000108 <__udivsi3>
 8000884:	0003      	movs	r3, r0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f90b 	bl	8000aa2 <HAL_SYSTICK_Config>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e00f      	b.n	80008b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d80b      	bhi.n	80008b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f8d8 	bl	8000a58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_InitTick+0x64>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b003      	add	sp, #12
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	001a      	movs	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	18d2      	adds	r2, r2, r3
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000100 	.word	0x20000100

080008ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000100 	.word	0x20000100

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b7f      	cmp	r3, #127	; 0x7f
 8000912:	d809      	bhi.n	8000928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	231f      	movs	r3, #31
 800091c:	401a      	ands	r2, r3
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_EnableIRQ+0x30>)
 8000920:	2101      	movs	r1, #1
 8000922:	4091      	lsls	r1, r2
 8000924:	000a      	movs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
  }
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b7f      	cmp	r3, #127	; 0x7f
 8000948:	d828      	bhi.n	800099c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	33c0      	adds	r3, #192	; 0xc0
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	589b      	ldr	r3, [r3, r2]
 800095a:	1dfa      	adds	r2, r7, #7
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	0011      	movs	r1, r2
 8000960:	2203      	movs	r2, #3
 8000962:	400a      	ands	r2, r1
 8000964:	00d2      	lsls	r2, r2, #3
 8000966:	21ff      	movs	r1, #255	; 0xff
 8000968:	4091      	lsls	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	401a      	ands	r2, r3
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0018      	movs	r0, r3
 8000980:	2303      	movs	r3, #3
 8000982:	4003      	ands	r3, r0
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	481f      	ldr	r0, [pc, #124]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800099a:	e031      	b.n	8000a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0019      	movs	r1, r3
 80009a4:	230f      	movs	r3, #15
 80009a6:	400b      	ands	r3, r1
 80009a8:	3b08      	subs	r3, #8
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3306      	adds	r3, #6
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	3304      	adds	r3, #4
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1dfa      	adds	r2, r7, #7
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	0011      	movs	r1, r2
 80009bc:	2203      	movs	r2, #3
 80009be:	400a      	ands	r2, r1
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	21ff      	movs	r1, #255	; 0xff
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	019b      	lsls	r3, r3, #6
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	401a      	ands	r2, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0018      	movs	r0, r3
 80009dc:	2303      	movs	r3, #3
 80009de:	4003      	ands	r3, r0
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	001c      	movs	r4, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	4023      	ands	r3, r4
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	430a      	orrs	r2, r1
 80009f6:	3306      	adds	r3, #6
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	18c3      	adds	r3, r0, r3
 80009fc:	3304      	adds	r3, #4
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b003      	add	sp, #12
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d301      	bcc.n	8000a28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a24:	2301      	movs	r3, #1
 8000a26:	e010      	b.n	8000a4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SysTick_Config+0x44>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2103      	movs	r1, #3
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ff7c 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x44>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	210f      	movs	r1, #15
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	1c02      	adds	r2, r0, #0
 8000a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	0002      	movs	r2, r0
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff33 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ffaf 	bl	8000a10 <SysTick_Config>
 8000ab2:	0003      	movs	r3, r0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e036      	b.n	8000b40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2221      	movs	r2, #33	; 0x21
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_DMA_Init+0x8c>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f8b4 	bl	8000c90 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2221      	movs	r2, #33	; 0x21
 8000b32:	2101      	movs	r1, #1
 8000b34:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2220      	movs	r2, #32
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}  
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	ffffc00f 	.word	0xffffc00f

08000b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	2204      	movs	r2, #4
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4013      	ands	r3, r2
 8000b72:	d024      	beq.n	8000bbe <HAL_DMA_IRQHandler+0x72>
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2204      	movs	r2, #4
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d020      	beq.n	8000bbe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2220      	movs	r2, #32
 8000b84:	4013      	ands	r3, r2
 8000b86:	d107      	bne.n	8000b98 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2104      	movs	r1, #4
 8000b94:	438a      	bics	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d100      	bne.n	8000bb2 <HAL_DMA_IRQHandler+0x66>
 8000bb0:	e06a      	b.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	0010      	movs	r0, r2
 8000bba:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bbc:	e064      	b.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d02b      	beq.n	8000c26 <HAL_DMA_IRQHandler+0xda>
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d027      	beq.n	8000c26 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	4013      	ands	r3, r2
 8000be0:	d10b      	bne.n	8000bfa <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	210a      	movs	r1, #10
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2221      	movs	r2, #33	; 0x21
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2102      	movs	r1, #2
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2100      	movs	r1, #0
 8000c10:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d036      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	0010      	movs	r0, r2
 8000c22:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c24:	e030      	b.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	d028      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2208      	movs	r2, #8
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d024      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	210e      	movs	r1, #14
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	2101      	movs	r1, #1
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2221      	movs	r2, #33	; 0x21
 8000c68:	2101      	movs	r1, #1
 8000c6a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2220      	movs	r2, #32
 8000c70:	2100      	movs	r1, #0
 8000c72:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	0010      	movs	r0, r2
 8000c84:	4798      	blx	r3
    }
   }
}  
 8000c86:	e7ff      	b.n	8000c88 <HAL_DMA_IRQHandler+0x13c>
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b004      	add	sp, #16
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <DMA_CalcBaseAndBitshift+0x30>)
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	4463      	add	r3, ip
 8000ca2:	2114      	movs	r1, #20
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fa2f 	bl	8000108 <__udivsi3>
 8000caa:	0003      	movs	r3, r0
 8000cac:	009a      	lsls	r2, r3, #2
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <DMA_CalcBaseAndBitshift+0x34>)
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	bffdfff8 	.word	0xbffdfff8
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd6:	e14f      	b.n	8000f78 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4091      	lsls	r1, r2
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <HAL_GPIO_Init+0x28>
 8000cee:	e140      	b.n	8000f72 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2203      	movs	r2, #3
 8000d02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	58d3      	ldr	r3, [r2, r3]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2107      	movs	r1, #7
 8000dde:	400b      	ands	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	23c0      	movs	r3, #192	; 0xc0
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_GPIO_Init+0x174>
 8000e3a:	e09a      	b.n	8000f72 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000e3e:	699a      	ldr	r2, [r3, #24]
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	619a      	str	r2, [r3, #24]
 8000e48:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <HAL_GPIO_Init+0x2cc>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	589b      	ldr	r3, [r3, r2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2203      	movs	r2, #3
 8000e66:	4013      	ands	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	0013      	movs	r3, r2
 8000e70:	43da      	mvns	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	2390      	movs	r3, #144	; 0x90
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x1e2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x1de>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x1da>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a42      	ldr	r2, [pc, #264]	; (8000fa0 <HAL_GPIO_Init+0x2d8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x1d6>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x1e4>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x1e4>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x1e4>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x1e4>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	2103      	movs	r1, #3
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x2cc>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43da      	mvns	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	029b      	lsls	r3, r3, #10
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	035b      	lsls	r3, r3, #13
 8000f36:	4013      	ands	r3, r2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	039b      	lsls	r3, r3, #14
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	1e13      	subs	r3, r2, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_GPIO_Init+0x2be>
 8000f84:	e6a8      	b.n	8000cd8 <HAL_GPIO_Init+0x10>
  } 
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	48000c00 	.word	0x48000c00
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	0008      	movs	r0, r1
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	1cbb      	adds	r3, r7, #2
 8000fb6:	1c02      	adds	r2, r0, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	1c7b      	adds	r3, r7, #1
 8000fbc:	1c0a      	adds	r2, r1, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc0:	1c7b      	adds	r3, r7, #1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	881a      	ldrh	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	1dba      	adds	r2, r7, #6
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d008      	beq.n	800100e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	8812      	ldrh	r2, [r2, #0]
 8001002:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	0018      	movs	r0, r3
 800100a:	f000 f807 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e301      	b.n	8001646 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	d100      	bne.n	800104e <HAL_RCC_OscConfig+0x1e>
 800104c:	e08d      	b.n	800116a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800104e:	4bc3      	ldr	r3, [pc, #780]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	220c      	movs	r2, #12
 8001054:	4013      	ands	r3, r2
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00e      	beq.n	8001078 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800105a:	4bc0      	ldr	r3, [pc, #768]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	220c      	movs	r2, #12
 8001060:	4013      	ands	r3, r2
 8001062:	2b08      	cmp	r3, #8
 8001064:	d116      	bne.n	8001094 <HAL_RCC_OscConfig+0x64>
 8001066:	4bbd      	ldr	r3, [pc, #756]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	401a      	ands	r2, r3
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	429a      	cmp	r2, r3
 8001076:	d10d      	bne.n	8001094 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	4bb8      	ldr	r3, [pc, #736]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	d100      	bne.n	8001086 <HAL_RCC_OscConfig+0x56>
 8001084:	e070      	b.n	8001168 <HAL_RCC_OscConfig+0x138>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d000      	beq.n	8001090 <HAL_RCC_OscConfig+0x60>
 800108e:	e06b      	b.n	8001168 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e2d8      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x7c>
 800109c:	4baf      	ldr	r3, [pc, #700]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4bae      	ldr	r3, [pc, #696]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e02f      	b.n	800110c <HAL_RCC_OscConfig+0xdc>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10c      	bne.n	80010ce <HAL_RCC_OscConfig+0x9e>
 80010b4:	4ba9      	ldr	r3, [pc, #676]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4ba8      	ldr	r3, [pc, #672]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010ba:	49a9      	ldr	r1, [pc, #676]	; (8001360 <HAL_RCC_OscConfig+0x330>)
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4ba6      	ldr	r3, [pc, #664]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4ba5      	ldr	r3, [pc, #660]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010c6:	49a7      	ldr	r1, [pc, #668]	; (8001364 <HAL_RCC_OscConfig+0x334>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e01e      	b.n	800110c <HAL_RCC_OscConfig+0xdc>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d10e      	bne.n	80010f4 <HAL_RCC_OscConfig+0xc4>
 80010d6:	4ba1      	ldr	r3, [pc, #644]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba0      	ldr	r3, [pc, #640]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4b9d      	ldr	r3, [pc, #628]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b9c      	ldr	r3, [pc, #624]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0249      	lsls	r1, r1, #9
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xdc>
 80010f4:	4b99      	ldr	r3, [pc, #612]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b98      	ldr	r3, [pc, #608]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80010fa:	4999      	ldr	r1, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x330>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4b96      	ldr	r3, [pc, #600]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b95      	ldr	r3, [pc, #596]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001106:	4997      	ldr	r1, [pc, #604]	; (8001364 <HAL_RCC_OscConfig+0x334>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d014      	beq.n	800113e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fbea 	bl	80008ec <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fbe5 	bl	80008ec <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e28a      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001130:	4b8a      	ldr	r3, [pc, #552]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0xee>
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fbd5 	bl	80008ec <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fbd0 	bl	80008ec <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e275      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b80      	ldr	r3, [pc, #512]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	029b      	lsls	r3, r3, #10
 8001162:	4013      	ands	r3, r2
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x118>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCC_OscConfig+0x146>
 8001174:	e069      	b.n	800124a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	220c      	movs	r2, #12
 800117c:	4013      	ands	r3, r2
 800117e:	d00b      	beq.n	8001198 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001180:	4b76      	ldr	r3, [pc, #472]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	220c      	movs	r2, #12
 8001186:	4013      	ands	r3, r2
 8001188:	2b08      	cmp	r3, #8
 800118a:	d11c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x196>
 800118c:	4b73      	ldr	r3, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	4013      	ands	r3, r2
 8001196:	d116      	bne.n	80011c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001198:	4b70      	ldr	r3, [pc, #448]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2202      	movs	r2, #2
 800119e:	4013      	ands	r3, r2
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e24b      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b6b      	ldr	r3, [pc, #428]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22f8      	movs	r2, #248	; 0xf8
 80011b4:	4393      	bics	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	00da      	lsls	r2, r3, #3
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c4:	e041      	b.n	800124a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d024      	beq.n	8001218 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fb87 	bl	80008ec <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fb82 	bl	80008ec <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e227      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f1      	beq.n	80011e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b56      	ldr	r3, [pc, #344]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	22f8      	movs	r2, #248	; 0xf8
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	4b52      	ldr	r3, [pc, #328]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e018      	b.n	800124a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800121e:	2101      	movs	r1, #1
 8001220:	438a      	bics	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fb62 	bl	80008ec <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fb5d 	bl	80008ec <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e202      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2202      	movs	r2, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d1f1      	bne.n	800122e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2208      	movs	r2, #8
 8001250:	4013      	ands	r3, r2
 8001252:	d036      	beq.n	80012c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d019      	beq.n	8001290 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125c:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 800125e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001260:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb40 	bl	80008ec <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fb3b 	bl	80008ec <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1e0      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001284:	4b35      	ldr	r3, [pc, #212]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d0f1      	beq.n	8001272 <HAL_RCC_OscConfig+0x242>
 800128e:	e018      	b.n	80012c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001296:	2101      	movs	r1, #1
 8001298:	438a      	bics	r2, r1
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fb26 	bl	80008ec <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fb21 	bl	80008ec <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1c6      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f1      	bne.n	80012a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2204      	movs	r2, #4
 80012c8:	4013      	ands	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0x29e>
 80012cc:	e0b4      	b.n	8001438 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	201f      	movs	r0, #31
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	055b      	lsls	r3, r3, #21
 80012de:	4013      	ands	r3, r2
 80012e0:	d110      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0549      	lsls	r1, r1, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	61da      	str	r2, [r3, #28]
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4013      	ands	r3, r2
 800130e:	d11a      	bne.n	8001346 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0049      	lsls	r1, r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fae5 	bl	80008ec <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001328:	f7ff fae0 	bl	80008ec <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e185      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4013      	ands	r3, r2
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10e      	bne.n	800136c <HAL_RCC_OscConfig+0x33c>
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_RCC_OscConfig+0x32c>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	621a      	str	r2, [r3, #32]
 800135a:	e035      	b.n	80013c8 <HAL_RCC_OscConfig+0x398>
 800135c:	40021000 	.word	0x40021000
 8001360:	fffeffff 	.word	0xfffeffff
 8001364:	fffbffff 	.word	0xfffbffff
 8001368:	40007000 	.word	0x40007000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x35e>
 8001374:	4bb6      	ldr	r3, [pc, #728]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4bb5      	ldr	r3, [pc, #724]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
 8001380:	4bb3      	ldr	r3, [pc, #716]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bb2      	ldr	r3, [pc, #712]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x398>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x380>
 8001396:	4bae      	ldr	r3, [pc, #696]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	4bad      	ldr	r3, [pc, #692]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800139c:	2104      	movs	r1, #4
 800139e:	430a      	orrs	r2, r1
 80013a0:	621a      	str	r2, [r3, #32]
 80013a2:	4bab      	ldr	r3, [pc, #684]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4baa      	ldr	r3, [pc, #680]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x398>
 80013b0:	4ba7      	ldr	r3, [pc, #668]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	4ba6      	ldr	r3, [pc, #664]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	438a      	bics	r2, r1
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013c2:	2104      	movs	r1, #4
 80013c4:	438a      	bics	r2, r1
 80013c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fa8c 	bl	80008ec <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e009      	b.n	80013ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fa87 	bl	80008ec <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	4a9b      	ldr	r2, [pc, #620]	; (8001654 <HAL_RCC_OscConfig+0x624>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e12b      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b98      	ldr	r3, [pc, #608]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x3aa>
 80013f8:	e013      	b.n	8001422 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fa77 	bl	80008ec <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e009      	b.n	8001418 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fa72 	bl	80008ec <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4a91      	ldr	r2, [pc, #580]	; (8001654 <HAL_RCC_OscConfig+0x624>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e116      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	4b87      	ldr	r3, [pc, #540]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001432:	4989      	ldr	r1, [pc, #548]	; (8001658 <HAL_RCC_OscConfig+0x628>)
 8001434:	400a      	ands	r2, r1
 8001436:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2210      	movs	r2, #16
 800143e:	4013      	ands	r3, r2
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12a      	bne.n	80014a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800144c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144e:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001450:	2104      	movs	r1, #4
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001456:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fa43 	bl	80008ec <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800146c:	f7ff fa3e 	bl	80008ec <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0e3      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800147e:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d0f1      	beq.n	800146c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001488:	4b71      	ldr	r3, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800148a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148c:	22f8      	movs	r2, #248	; 0xf8
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	00da      	lsls	r2, r3, #3
 8001498:	4b6d      	ldr	r3, [pc, #436]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800149a:	430a      	orrs	r2, r1
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
 800149e:	e034      	b.n	800150a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	3305      	adds	r3, #5
 80014a6:	d111      	bne.n	80014cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014a8:	4b69      	ldr	r3, [pc, #420]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014ae:	2104      	movs	r1, #4
 80014b0:	438a      	bics	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014b4:	4b66      	ldr	r3, [pc, #408]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	22f8      	movs	r2, #248	; 0xf8
 80014ba:	4393      	bics	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ca:	e01e      	b.n	800150a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014cc:	4b60      	ldr	r3, [pc, #384]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014d2:	2104      	movs	r1, #4
 80014d4:	430a      	orrs	r2, r1
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014d8:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014dc:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80014de:	2101      	movs	r1, #1
 80014e0:	438a      	bics	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa02 	bl	80008ec <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014ee:	f7ff f9fd 	bl	80008ec <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0a2      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d1f1      	bne.n	80014ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x4e4>
 8001512:	e097      	b.n	8001644 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	220c      	movs	r2, #12
 800151a:	4013      	ands	r3, r2
 800151c:	2b08      	cmp	r3, #8
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x4f2>
 8001520:	e06b      	b.n	80015fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d14c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001530:	494a      	ldr	r1, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x62c>)
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff f9d9 	bl	80008ec <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f9d4 	bl	80008ec <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e079      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	4013      	ands	r3, r2
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	220f      	movs	r2, #15
 8001564:	4393      	bics	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800156e:	430a      	orrs	r2, r1
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a3a      	ldr	r2, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x630>)
 8001578:	4013      	ands	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	431a      	orrs	r2, r3
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0449      	lsls	r1, r1, #17
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff f9a7 	bl	80008ec <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff f9a2 	bl	80008ec <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e047      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	049b      	lsls	r3, r3, #18
 80015be:	4013      	ands	r3, r2
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x574>
 80015c2:	e03f      	b.n	8001644 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x62c>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f98c 	bl	80008ec <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff f987 	bl	80008ec <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e02c      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	049b      	lsls	r3, r3, #18
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x5aa>
 80015f8:	e024      	b.n	8001644 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e01f      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x620>)
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	429a      	cmp	r2, r3
 8001620:	d10e      	bne.n	8001640 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	220f      	movs	r2, #15
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	23f0      	movs	r3, #240	; 0xf0
 8001634:	039b      	lsls	r3, r3, #14
 8001636:	401a      	ands	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b008      	add	sp, #32
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	00001388 	.word	0x00001388
 8001658:	efffffff 	.word	0xefffffff
 800165c:	feffffff 	.word	0xfeffffff
 8001660:	ffc2ffff 	.word	0xffc2ffff

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b3      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	4013      	ands	r3, r2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d911      	bls.n	80016aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001698:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e09a      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d015      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	4013      	ands	r3, r2
 80016bc:	d006      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80016c4:	21e0      	movs	r1, #224	; 0xe0
 80016c6:	00c9      	lsls	r1, r1, #3
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	22f0      	movs	r2, #240	; 0xf0
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	d040      	beq.n	800176c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4013      	ands	r3, r2
 80016fc:	d114      	bne.n	8001728 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06e      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	049b      	lsls	r3, r3, #18
 8001712:	4013      	ands	r3, r2
 8001714:	d108      	bne.n	8001728 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e062      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e05b      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff f8d6 	bl	80008ec <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001744:	e009      	b.n	800175a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001746:	f7ff f8d1 	bl	80008ec <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_RCC_ClockConfig+0x18c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e042      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	220c      	movs	r2, #12
 8001760:	401a      	ands	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1ec      	bne.n	8001746 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d211      	bcs.n	800179e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4393      	bics	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_RCC_ClockConfig+0x184>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e020      	b.n	80017e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_RCC_ClockConfig+0x190>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017bc:	f000 f820 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017c0:	0001      	movs	r1, r0
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_RCC_ClockConfig+0x188>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	220f      	movs	r2, #15
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x194>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	000a      	movs	r2, r1
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x198>)
 80017d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff f841 	bl	8000860 <HAL_InitTick>
  
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	00001388 	.word	0x00001388
 80017f4:	fffff8ff 	.word	0xfffff8ff
 80017f8:	08002624 	.word	0x08002624
 80017fc:	20000000 	.word	0x20000000

08001800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b08f      	sub	sp, #60	; 0x3c
 8001804:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001806:	2314      	movs	r3, #20
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800180e:	c313      	stmia	r3!, {r0, r1, r4}
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001818:	ca13      	ldmia	r2!, {r0, r1, r4}
 800181a:	c313      	stmia	r3!, {r0, r1, r4}
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	220c      	movs	r2, #12
 800183e:	4013      	ands	r3, r2
 8001840:	2b04      	cmp	r3, #4
 8001842:	d002      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x4a>
 8001844:	2b08      	cmp	r3, #8
 8001846:	d003      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x50>
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800184e:	e02d      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	220f      	movs	r2, #15
 8001856:	4013      	ands	r3, r2
 8001858:	2214      	movs	r2, #20
 800185a:	18ba      	adds	r2, r7, r2
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	220f      	movs	r2, #15
 8001866:	4013      	ands	r3, r2
 8001868:	1d3a      	adds	r2, r7, #4
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	4013      	ands	r3, r2
 8001876:	d009      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187a:	4812      	ldr	r0, [pc, #72]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800187c:	f7fe fc44 	bl	8000108 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	001a      	movs	r2, r3
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	4353      	muls	r3, r2
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
 800188a:	e009      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800188c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800188e:	000a      	movs	r2, r1
 8001890:	0152      	lsls	r2, r2, #5
 8001892:	1a52      	subs	r2, r2, r1
 8001894:	0193      	lsls	r3, r2, #6
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	185b      	adds	r3, r3, r1
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018a4:	e002      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b00f      	add	sp, #60	; 0x3c
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	08002604 	.word	0x08002604
 80018bc:	08002614 	.word	0x08002614
 80018c0:	40021000 	.word	0x40021000
 80018c4:	007a1200 	.word	0x007a1200

080018c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e042      	b.n	8001960 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	223d      	movs	r2, #61	; 0x3d
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223c      	movs	r2, #60	; 0x3c
 80018ea:	2100      	movs	r1, #0
 80018ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7fe feb3 	bl	800065c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	223d      	movs	r2, #61	; 0x3d
 80018fa:	2102      	movs	r1, #2
 80018fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	0019      	movs	r1, r3
 8001908:	0010      	movs	r0, r2
 800190a:	f000 facf 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2246      	movs	r2, #70	; 0x46
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223e      	movs	r2, #62	; 0x3e
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	223f      	movs	r2, #63	; 0x3f
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2241      	movs	r2, #65	; 0x41
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2242      	movs	r2, #66	; 0x42
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2243      	movs	r2, #67	; 0x43
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2244      	movs	r2, #68	; 0x44
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2245      	movs	r2, #69	; 0x45
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	223d      	movs	r2, #61	; 0x3d
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e042      	b.n	8001a00 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	223d      	movs	r2, #61	; 0x3d
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223c      	movs	r2, #60	; 0x3c
 800198a:	2100      	movs	r1, #0
 800198c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f839 	bl	8001a08 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223d      	movs	r2, #61	; 0x3d
 800199a:	2102      	movs	r1, #2
 800199c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	0019      	movs	r1, r3
 80019a8:	0010      	movs	r0, r2
 80019aa:	f000 fa7f 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2246      	movs	r2, #70	; 0x46
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	223e      	movs	r2, #62	; 0x3e
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	223f      	movs	r2, #63	; 0x3f
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2241      	movs	r2, #65	; 0x41
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2242      	movs	r2, #66	; 0x42
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2243      	movs	r2, #67	; 0x43
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2244      	movs	r2, #68	; 0x44
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2245      	movs	r2, #69	; 0x45
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	223d      	movs	r2, #61	; 0x3d
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e042      	b.n	8001ab0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223d      	movs	r2, #61	; 0x3d
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223c      	movs	r2, #60	; 0x3c
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 f839 	bl	8001ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	223d      	movs	r2, #61	; 0x3d
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	0019      	movs	r1, r3
 8001a58:	0010      	movs	r0, r2
 8001a5a:	f000 fa27 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2246      	movs	r2, #70	; 0x46
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	223e      	movs	r2, #62	; 0x3e
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	223f      	movs	r2, #63	; 0x3f
 8001a72:	2101      	movs	r1, #1
 8001a74:	5499      	strb	r1, [r3, r2]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2240      	movs	r2, #64	; 0x40
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2241      	movs	r2, #65	; 0x41
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2242      	movs	r2, #66	; 0x42
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2243      	movs	r2, #67	; 0x43
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2244      	movs	r2, #68	; 0x44
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2245      	movs	r2, #69	; 0x45
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223d      	movs	r2, #61	; 0x3d
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2317      	movs	r3, #23
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	223c      	movs	r2, #60	; 0x3c
 8001ae0:	5c9b      	ldrb	r3, [r3, r2]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_OC_ConfigChannel+0x22>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e042      	b.n	8001b70 <HAL_TIM_OC_ConfigChannel+0xa8>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	223c      	movs	r2, #60	; 0x3c
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d027      	beq.n	8001b48 <HAL_TIM_OC_ConfigChannel+0x80>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d82c      	bhi.n	8001b58 <HAL_TIM_OC_ConfigChannel+0x90>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d019      	beq.n	8001b38 <HAL_TIM_OC_ConfigChannel+0x70>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d826      	bhi.n	8001b58 <HAL_TIM_OC_ConfigChannel+0x90>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_TIM_OC_ConfigChannel+0x50>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d008      	beq.n	8001b28 <HAL_TIM_OC_ConfigChannel+0x60>
 8001b16:	e01f      	b.n	8001b58 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 fa43 	bl	8001fac <TIM_OC1_SetConfig>
      break;
 8001b26:	e01c      	b.n	8001b62 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	0011      	movs	r1, r2
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fac3 	bl	80020bc <TIM_OC2_SetConfig>
      break;
 8001b36:	e014      	b.n	8001b62 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	0011      	movs	r1, r2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 fb3f 	bl	80021c4 <TIM_OC3_SetConfig>
      break;
 8001b46:	e00c      	b.n	8001b62 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	0011      	movs	r1, r2
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fbbd 	bl	80022d0 <TIM_OC4_SetConfig>
      break;
 8001b56:	e004      	b.n	8001b62 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8001b58:	2317      	movs	r3, #23
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
      break;
 8001b60:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	223c      	movs	r2, #60	; 0x3c
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

  return status;
 8001b6a:	2317      	movs	r3, #23
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b006      	add	sp, #24
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2317      	movs	r3, #23
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	223c      	movs	r2, #60	; 0x3c
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0ad      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	223c      	movs	r2, #60	; 0x3c
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d100      	bne.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ba8:	e076      	b.n	8001c98 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d900      	bls.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001bb0:	e095      	b.n	8001cde <HAL_TIM_PWM_ConfigChannel+0x166>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d04e      	beq.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d900      	bls.n	8001bc0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001bbe:	e08e      	b.n	8001cde <HAL_TIM_PWM_ConfigChannel+0x166>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_PWM_ConfigChannel+0x56>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d021      	beq.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001bcc:	e087      	b.n	8001cde <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f9e8 	bl	8001fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2108      	movs	r1, #8
 8001be8:	430a      	orrs	r2, r1
 8001bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6999      	ldr	r1, [r3, #24]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	619a      	str	r2, [r3, #24]
      break;
 8001c0e:	e06b      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	0011      	movs	r1, r2
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 fa4f 	bl	80020bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0109      	lsls	r1, r1, #4
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4931      	ldr	r1, [pc, #196]	; (8001d00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6999      	ldr	r1, [r3, #24]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	021a      	lsls	r2, r3, #8
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	619a      	str	r2, [r3, #24]
      break;
 8001c54:	e048      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fab0 	bl	80021c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2108      	movs	r1, #8
 8001c70:	430a      	orrs	r2, r1
 8001c72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2104      	movs	r1, #4
 8001c80:	438a      	bics	r2, r1
 8001c82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69d9      	ldr	r1, [r3, #28]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	61da      	str	r2, [r3, #28]
      break;
 8001c96:	e027      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 fb15 	bl	80022d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0109      	lsls	r1, r1, #4
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	490f      	ldr	r1, [pc, #60]	; (8001d00 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69d9      	ldr	r1, [r3, #28]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	021a      	lsls	r2, r3, #8
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	61da      	str	r2, [r3, #28]
      break;
 8001cdc:	e004      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001cde:	2317      	movs	r3, #23
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
      break;
 8001ce6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	223c      	movs	r2, #60	; 0x3c
 8001cec:	2100      	movs	r1, #0
 8001cee:	5499      	strb	r1, [r3, r2]

  return status;
 8001cf0:	2317      	movs	r3, #23
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	fffffbff 	.word	0xfffffbff

08001d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223c      	movs	r2, #60	; 0x3c
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_TIM_ConfigClockSource+0x20>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0bc      	b.n	8001e9e <HAL_TIM_ConfigClockSource+0x19a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	223c      	movs	r2, #60	; 0x3c
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	223d      	movs	r2, #61	; 0x3d
 8001d30:	2102      	movs	r1, #2
 8001d32:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2277      	movs	r2, #119	; 0x77
 8001d40:	4393      	bics	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	0192      	lsls	r2, r2, #6
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0xde>
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0192      	lsls	r2, r2, #6
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d900      	bls.n	8001d6a <HAL_TIM_ConfigClockSource+0x66>
 8001d68:	e088      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0152      	lsls	r2, r2, #5
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d100      	bne.n	8001d74 <HAL_TIM_ConfigClockSource+0x70>
 8001d72:	e088      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x182>
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	0152      	lsls	r2, r2, #5
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d900      	bls.n	8001d7e <HAL_TIM_ConfigClockSource+0x7a>
 8001d7c:	e07e      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d7e:	2b70      	cmp	r3, #112	; 0x70
 8001d80:	d018      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xb0>
 8001d82:	d900      	bls.n	8001d86 <HAL_TIM_ConfigClockSource+0x82>
 8001d84:	e07a      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d86:	2b60      	cmp	r3, #96	; 0x60
 8001d88:	d04f      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0x126>
 8001d8a:	d900      	bls.n	8001d8e <HAL_TIM_ConfigClockSource+0x8a>
 8001d8c:	e076      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d8e:	2b50      	cmp	r3, #80	; 0x50
 8001d90:	d03b      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x106>
 8001d92:	d900      	bls.n	8001d96 <HAL_TIM_ConfigClockSource+0x92>
 8001d94:	e072      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d057      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x146>
 8001d9a:	d900      	bls.n	8001d9e <HAL_TIM_ConfigClockSource+0x9a>
 8001d9c:	e06e      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001d9e:	2b30      	cmp	r3, #48	; 0x30
 8001da0:	d063      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x166>
 8001da2:	d86b      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d060      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x166>
 8001da8:	d868      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d05d      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x166>
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d05b      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x166>
 8001db2:	e063      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f000 fb68 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2277      	movs	r2, #119	; 0x77
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	609a      	str	r2, [r3, #8]
      break;
 8001de0:	e052      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f000 fb51 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	01c9      	lsls	r1, r1, #7
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
      break;
 8001e08:	e03e      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	001a      	movs	r2, r3
 8001e18:	f000 fac4 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2150      	movs	r1, #80	; 0x50
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 fb1e 	bl	8002464 <TIM_ITRx_SetConfig>
      break;
 8001e28:	e02e      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	001a      	movs	r2, r3
 8001e38:	f000 fae2 	bl	8002400 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2160      	movs	r1, #96	; 0x60
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fb0e 	bl	8002464 <TIM_ITRx_SetConfig>
      break;
 8001e48:	e01e      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	001a      	movs	r2, r3
 8001e58:	f000 faa4 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fafe 	bl	8002464 <TIM_ITRx_SetConfig>
      break;
 8001e68:	e00e      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f000 faf5 	bl	8002464 <TIM_ITRx_SetConfig>
      break;
 8001e7a:	e005      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
      break;
 8001e84:	e000      	b.n	8001e88 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001e86:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	223d      	movs	r2, #61	; 0x3d
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	223c      	movs	r2, #60	; 0x3c
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

  return status;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	ffff00ff 	.word	0xffff00ff

08001eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <TIM_Base_SetConfig+0x2a>
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d003      	beq.n	8001ed6 <TIM_Base_SetConfig+0x2a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <TIM_Base_SetConfig+0xe8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d108      	bne.n	8001ee8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2270      	movs	r2, #112	; 0x70
 8001eda:	4393      	bics	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d018      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	05db      	lsls	r3, r3, #23
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d013      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <TIM_Base_SetConfig+0xe8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <TIM_Base_SetConfig+0xec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <TIM_Base_SetConfig+0xf0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <TIM_Base_SetConfig+0xf4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_Base_SetConfig+0x76>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <TIM_Base_SetConfig+0xf8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a20      	ldr	r2, [pc, #128]	; (8001fa8 <TIM_Base_SetConfig+0xfc>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	4393      	bics	r3, r2
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0xce>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <TIM_Base_SetConfig+0xf0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0xce>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <TIM_Base_SetConfig+0xf4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0xce>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <TIM_Base_SetConfig+0xf8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d103      	bne.n	8001f82 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	615a      	str	r2, [r3, #20]
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40002000 	.word	0x40002000
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40014400 	.word	0x40014400
 8001fa4:	40014800 	.word	0x40014800
 8001fa8:	fffffcff 	.word	0xfffffcff

08001fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2270      	movs	r2, #112	; 0x70
 8001fda:	4393      	bics	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <TIM_OC1_SetConfig+0xf8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <TIM_OC1_SetConfig+0x76>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <TIM_OC1_SetConfig+0xfc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <TIM_OC1_SetConfig+0x76>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <TIM_OC1_SetConfig+0x100>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_OC1_SetConfig+0x76>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <TIM_OC1_SetConfig+0x104>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10c      	bne.n	800203c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2208      	movs	r2, #8
 8002026:	4393      	bics	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2204      	movs	r2, #4
 8002038:	4393      	bics	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <TIM_OC1_SetConfig+0xf8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <TIM_OC1_SetConfig+0xb0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <TIM_OC1_SetConfig+0xfc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_OC1_SetConfig+0xb0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <TIM_OC1_SetConfig+0x100>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_OC1_SetConfig+0xb0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <TIM_OC1_SetConfig+0x104>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <TIM_OC1_SetConfig+0x108>)
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <TIM_OC1_SetConfig+0x10c>)
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	621a      	str	r2, [r3, #32]
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b006      	add	sp, #24
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800
 80020b4:	fffffeff 	.word	0xfffffeff
 80020b8:	fffffdff 	.word	0xfffffdff

080020bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2210      	movs	r2, #16
 80020cc:	4393      	bics	r3, r2
 80020ce:	001a      	movs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <TIM_OC2_SetConfig+0xe8>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <TIM_OC2_SetConfig+0xec>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2220      	movs	r2, #32
 8002106:	4393      	bics	r3, r2
 8002108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <TIM_OC2_SetConfig+0xf0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	4393      	bics	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2240      	movs	r2, #64	; 0x40
 8002136:	4393      	bics	r3, r2
 8002138:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <TIM_OC2_SetConfig+0xf0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00b      	beq.n	800215a <TIM_OC2_SetConfig+0x9e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <TIM_OC2_SetConfig+0xf4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <TIM_OC2_SetConfig+0x9e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <TIM_OC2_SetConfig+0xf8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <TIM_OC2_SetConfig+0x9e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <TIM_OC2_SetConfig+0xfc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d113      	bne.n	8002182 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4a17      	ldr	r2, [pc, #92]	; (80021bc <TIM_OC2_SetConfig+0x100>)
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_OC2_SetConfig+0x104>)
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	621a      	str	r2, [r3, #32]
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b006      	add	sp, #24
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffff8fff 	.word	0xffff8fff
 80021a8:	fffffcff 	.word	0xfffffcff
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800
 80021bc:	fffffbff 	.word	0xfffffbff
 80021c0:	fffff7ff 	.word	0xfffff7ff

080021c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <TIM_OC3_SetConfig+0xe4>)
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2270      	movs	r2, #112	; 0x70
 80021f0:	4393      	bics	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2203      	movs	r2, #3
 80021f8:	4393      	bics	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4a28      	ldr	r2, [pc, #160]	; (80022ac <TIM_OC3_SetConfig+0xe8>)
 800220a:	4013      	ands	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <TIM_OC3_SetConfig+0xec>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10d      	bne.n	800223e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <TIM_OC3_SetConfig+0xf0>)
 8002226:	4013      	ands	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <TIM_OC3_SetConfig+0xf4>)
 800223a:	4013      	ands	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <TIM_OC3_SetConfig+0xec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00b      	beq.n	800225e <TIM_OC3_SetConfig+0x9a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <TIM_OC3_SetConfig+0xf8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_OC3_SetConfig+0x9a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <TIM_OC3_SetConfig+0xfc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_OC3_SetConfig+0x9a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <TIM_OC3_SetConfig+0x100>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d113      	bne.n	8002286 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <TIM_OC3_SetConfig+0x104>)
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <TIM_OC3_SetConfig+0x108>)
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b006      	add	sp, #24
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	fffffeff 	.word	0xfffffeff
 80022ac:	fffffdff 	.word	0xfffffdff
 80022b0:	40012c00 	.word	0x40012c00
 80022b4:	fffff7ff 	.word	0xfffff7ff
 80022b8:	fffffbff 	.word	0xfffffbff
 80022bc:	40014000 	.word	0x40014000
 80022c0:	40014400 	.word	0x40014400
 80022c4:	40014800 	.word	0x40014800
 80022c8:	ffffefff 	.word	0xffffefff
 80022cc:	ffffdfff 	.word	0xffffdfff

080022d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <TIM_OC4_SetConfig+0xb0>)
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a22      	ldr	r2, [pc, #136]	; (8002384 <TIM_OC4_SetConfig+0xb4>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a21      	ldr	r2, [pc, #132]	; (8002388 <TIM_OC4_SetConfig+0xb8>)
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <TIM_OC4_SetConfig+0xbc>)
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	031b      	lsls	r3, r3, #12
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a19      	ldr	r2, [pc, #100]	; (8002390 <TIM_OC4_SetConfig+0xc0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00b      	beq.n	8002348 <TIM_OC4_SetConfig+0x78>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a18      	ldr	r2, [pc, #96]	; (8002394 <TIM_OC4_SetConfig+0xc4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <TIM_OC4_SetConfig+0x78>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <TIM_OC4_SetConfig+0xc8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_OC4_SetConfig+0x78>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <TIM_OC4_SetConfig+0xcc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d109      	bne.n	800235c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <TIM_OC4_SetConfig+0xd0>)
 800234c:	4013      	ands	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	ffffefff 	.word	0xffffefff
 8002384:	ffff8fff 	.word	0xffff8fff
 8002388:	fffffcff 	.word	0xfffffcff
 800238c:	ffffdfff 	.word	0xffffdfff
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800
 80023a0:	ffffbfff 	.word	0xffffbfff

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	001a      	movs	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	22f0      	movs	r2, #240	; 0xf0
 80023ce:	4393      	bics	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	220a      	movs	r2, #10
 80023e0:	4393      	bics	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	621a      	str	r2, [r3, #32]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b006      	add	sp, #24
 80023fe:	bd80      	pop	{r7, pc}

08002400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	2210      	movs	r2, #16
 8002412:	4393      	bics	r3, r2
 8002414:	001a      	movs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <TIM_TI2_ConfigInputStage+0x60>)
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	031b      	lsls	r3, r3, #12
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	22a0      	movs	r2, #160	; 0xa0
 800243c:	4393      	bics	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b006      	add	sp, #24
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	ffff0fff 	.word	0xffff0fff

08002464 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2270      	movs	r2, #112	; 0x70
 8002478:	4393      	bics	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	2207      	movs	r2, #7
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <TIM_ETR_SetConfig+0x3c>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	ffff00ff 	.word	0xffff00ff

080024d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223c      	movs	r2, #60	; 0x3c
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e047      	b.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223c      	movs	r2, #60	; 0x3c
 80024f4:	2101      	movs	r1, #1
 80024f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	223d      	movs	r2, #61	; 0x3d
 80024fc:	2102      	movs	r1, #2
 80024fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2270      	movs	r2, #112	; 0x70
 8002514:	4393      	bics	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00f      	beq.n	8002554 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	05db      	lsls	r3, r3, #23
 800253c:	429a      	cmp	r2, r3
 800253e:	d009      	beq.n	8002554 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10c      	bne.n	800256e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	4393      	bics	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	4313      	orrs	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	223d      	movs	r2, #61	; 0x3d
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	223c      	movs	r2, #60	; 0x3c
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b004      	add	sp, #16
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40000400 	.word	0x40000400
 8002590:	40014000 	.word	0x40014000

08002594 <__libc_init_array>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	2600      	movs	r6, #0
 8002598:	4d0c      	ldr	r5, [pc, #48]	; (80025cc <__libc_init_array+0x38>)
 800259a:	4c0d      	ldr	r4, [pc, #52]	; (80025d0 <__libc_init_array+0x3c>)
 800259c:	1b64      	subs	r4, r4, r5
 800259e:	10a4      	asrs	r4, r4, #2
 80025a0:	42a6      	cmp	r6, r4
 80025a2:	d109      	bne.n	80025b8 <__libc_init_array+0x24>
 80025a4:	2600      	movs	r6, #0
 80025a6:	f000 f821 	bl	80025ec <_init>
 80025aa:	4d0a      	ldr	r5, [pc, #40]	; (80025d4 <__libc_init_array+0x40>)
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <__libc_init_array+0x44>)
 80025ae:	1b64      	subs	r4, r4, r5
 80025b0:	10a4      	asrs	r4, r4, #2
 80025b2:	42a6      	cmp	r6, r4
 80025b4:	d105      	bne.n	80025c2 <__libc_init_array+0x2e>
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	00b3      	lsls	r3, r6, #2
 80025ba:	58eb      	ldr	r3, [r5, r3]
 80025bc:	4798      	blx	r3
 80025be:	3601      	adds	r6, #1
 80025c0:	e7ee      	b.n	80025a0 <__libc_init_array+0xc>
 80025c2:	00b3      	lsls	r3, r6, #2
 80025c4:	58eb      	ldr	r3, [r5, r3]
 80025c6:	4798      	blx	r3
 80025c8:	3601      	adds	r6, #1
 80025ca:	e7f2      	b.n	80025b2 <__libc_init_array+0x1e>
 80025cc:	08002634 	.word	0x08002634
 80025d0:	08002634 	.word	0x08002634
 80025d4:	08002634 	.word	0x08002634
 80025d8:	08002638 	.word	0x08002638

080025dc <memset>:
 80025dc:	0003      	movs	r3, r0
 80025de:	1882      	adds	r2, r0, r2
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d100      	bne.n	80025e6 <memset+0xa>
 80025e4:	4770      	bx	lr
 80025e6:	7019      	strb	r1, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e7f9      	b.n	80025e0 <memset+0x4>

080025ec <_init>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr

080025f8 <_fini>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr
